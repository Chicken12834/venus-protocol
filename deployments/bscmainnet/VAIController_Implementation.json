{
  "address": "0x9817823d5C4023EFb6173099928F17bb77CD1d69",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "error",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "info",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "detail",
          "type": "uint256"
        }
      ],
      "name": "Failure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "LiquidateVAI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "MintFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "previousMintEnabledOnlyForPrimeHolder",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newMintEnabledOnlyForPrimeHolder",
          "type": "bool"
        }
      ],
      "name": "MintOnlyForPrimeHolder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintVAIAmount",
          "type": "uint256"
        }
      ],
      "name": "MintVAI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlAddress",
          "type": "address"
        }
      ],
      "name": "NewAccessControl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "oldComptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "NewComptroller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPrime",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPrime",
          "type": "address"
        }
      ],
      "name": "NewPrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryAddress",
          "type": "address"
        }
      ],
      "name": "NewTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasuryGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasuryGuardian",
          "type": "address"
        }
      ],
      "name": "NewTreasuryGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTreasuryPercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "NewTreasuryPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBaseRateMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBaseRateMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewVAIBaseRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFloatRateMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFlatRateMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewVAIFloatRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMintCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMintCap",
          "type": "uint256"
        }
      ],
      "name": "NewVAIMintCap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "NewVAIReceiver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldVaiToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVaiToken",
          "type": "address"
        }
      ],
      "name": "NewVaiToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayVAIAmount",
          "type": "uint256"
        }
      ],
      "name": "RepayVAI",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "INITIAL_VAI_MINT_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract VAIUnitroller",
          "name": "unitroller",
          "type": "address"
        }
      ],
      "name": "_become",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        }
      ],
      "name": "_setComptroller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasuryGuardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newTreasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newTreasuryPercent",
          "type": "uint256"
        }
      ],
      "name": "_setTreasuryData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "accessControl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "accrueVAIInterest",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "baseRateMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "floatRateMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBlocksPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "getMintableVAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVAIAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "getVAICalculateRepayAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "getVAIMinterInterestIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getVAIRepayAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVAIRepayRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVAIRepayRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isVenusVAIInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract VTokenInterface",
          "name": "vTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateVAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "mintCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "mintEnabledOnlyForPrimeHolder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintVAIAmount",
          "type": "uint256"
        }
      ],
      "name": "mintVAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pastVAIInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingVAIControllerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "receiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayVAIAmount",
          "type": "uint256"
        }
      ],
      "name": "repayVAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newAccessControlAddress",
          "type": "address"
        }
      ],
      "name": "setAccessControl",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBaseRateMantissa",
          "type": "uint256"
        }
      ],
      "name": "setBaseRate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFloatRateMantissa",
          "type": "uint256"
        }
      ],
      "name": "setFloatRate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintCap",
          "type": "uint256"
        }
      ],
      "name": "setMintCap",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "prime_",
          "type": "address"
        }
      ],
      "name": "setPrimeToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "setReceiver",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "vai_",
          "type": "address"
        }
      ],
      "name": "setVAIToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "toggleOnlyPrimeHolderMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treasuryGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaiControllerImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaiMintIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "venusVAIMinterIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "venusVAIState",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "index",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "block",
          "type": "uint32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x71f21e4695e07f1756e23480a7dc821585f599ac607168a931611fabebf41882",
  "receipt": {
    "to": null,
    "from": "0xA6575f1D5Bd6545fBd34BE05259D9d6ae60641f2",
    "contractAddress": "0x9817823d5C4023EFb6173099928F17bb77CD1d69",
    "transactionIndex": 210,
    "gasUsed": "3871654",
    "logsBloom": "0x
    "blockHash": "0x9293c4abc6eb91ed41531926ceab0a37c4be2c627d1cc05572dd3b6587c6a523",
    "transactionHash": "0x71f21e4695e07f1756e23480a7dc821585f599ac607168a931611fabebf41882",
    "logs": [],
    "blockNumber": 34690053,
    "cumulativeGasUsed": "28129716",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7830d2b3dd486e9651687b362529ec15",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateVAI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"MintFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"previousMintEnabledOnlyForPrimeHolder\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newMintEnabledOnlyForPrimeHolder\",\"type\":\"bool\"}],\"name\":\"MintOnlyForPrimeHolder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintVAIAmount\",\"type\":\"uint256\"}],\"name\":\"MintVAI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlAddress\",\"type\":\"address\"}],\"name\":\"NewAccessControl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPrime\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPrime\",\"type\":\"address\"}],\"name\":\"NewPrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"NewTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasuryGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasuryGuardian\",\"type\":\"address\"}],\"name\":\"NewTreasuryGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTreasuryPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"NewTreasuryPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBaseRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseRateMantissa\",\"type\":\"uint256\"}],\"name\":\"NewVAIBaseRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFloatRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlatRateMantissa\",\"type\":\"uint256\"}],\"name\":\"NewVAIFloatRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintCap\",\"type\":\"uint256\"}],\"name\":\"NewVAIMintCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"NewVAIReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVaiToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVaiToken\",\"type\":\"address\"}],\"name\":\"NewVaiToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayVAIAmount\",\"type\":\"uint256\"}],\"name\":\"RepayVAI\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_VAI_MINT_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract VAIUnitroller\",\"name\":\"unitroller\",\"type\":\"address\"}],\"name\":\"_become\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"}],\"name\":\"_setComptroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTreasuryPercent\",\"type\":\"uint256\"}],\"name\":\"_setTreasuryData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accessControl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueVAIInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRateMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"floatRateMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getMintableVAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVAIAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"getVAICalculateRepayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getVAIMinterInterestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVAIRepayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVAIRepayRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVAIRepayRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVenusVAIInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract VTokenInterface\",\"name\":\"vTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateVAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintEnabledOnlyForPrimeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintVAIAmount\",\"type\":\"uint256\"}],\"name\":\"mintVAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pastVAIInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingVAIControllerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayVAIAmount\",\"type\":\"uint256\"}],\"name\":\"repayVAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessControlAddress\",\"type\":\"address\"}],\"name\":\"setAccessControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseRateMantissa\",\"type\":\"uint256\"}],\"name\":\"setBaseRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFloatRateMantissa\",\"type\":\"uint256\"}],\"name\":\"setFloatRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintCap\",\"type\":\"uint256\"}],\"name\":\"setMintCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"prime_\",\"type\":\"address\"}],\"name\":\"setPrimeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"vai_\",\"type\":\"address\"}],\"name\":\"setVAIToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleOnlyPrimeHolderMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaiControllerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaiMintIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venusVAIMinterIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"venusVAIState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"methods\":{\"_setComptroller(address)\":{\"details\":\"Admin function to set a new comptroller\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"getVAIAddress()\":{\"return\":\"The address of VAI\"},\"getVAICalculateRepayAmount(address,uint256)\":{\"params\":{\"borrower\":\"The address of the VAI borrower\",\"repayAmount\":\"The amount of VAI being returned\"},\"return\":\"(uint, uint, uint) Amount of VAI to be burned, amount of VAI the user needs to pay in current interest and amount of VAI the user needs to pay in past interest\"},\"getVAIRepayAmount(address)\":{\"params\":{\"account\":\"The address of the VAI borrower\"},\"return\":\"(uint) The total amount of VAI the user needs to repay\"},\"liquidateVAI(address,uint256,address)\":{\"params\":{\"borrower\":\"The borrower of vai to be liquidated\",\"repayAmount\":\"The amount of the underlying borrowed asset to repay\",\"vTokenCollateral\":\"The market in which to seize collateral from the borrower\"},\"return\":\"(uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\"},\"mintVAI(uint256)\":{\"params\":{\"mintVAIAmount\":\"The amount of the VAI to be minted.\"},\"return\":\"0 on success, otherwise an error code\"},\"repayVAI(uint256)\":{\"params\":{\"repayVAIAmount\":\"The amount of the VAI to be repaid.\"},\"return\":\"0 on success, otherwise an error code\"},\"setAccessControl(address)\":{\"details\":\"Admin function to set the access control address\",\"params\":{\"newAccessControlAddress\":\"New address for the access control\"}},\"setBaseRate(uint256)\":{\"params\":{\"newBaseRateMantissa\":\"the base rate multiplied by 10**18\"}},\"setFloatRate(uint256)\":{\"params\":{\"newFloatRateMantissa\":\"the VAI float rate multiplied by 10**18\"}},\"setMintCap(uint256)\":{\"params\":{\"_mintCap\":\"the amount of VAI that can be minted\"}},\"setPrimeToken(address)\":{\"params\":{\"prime_\":\"The new address of the prime token contract\"}},\"setReceiver(address)\":{\"params\":{\"newReceiver\":\"the address of the VAI fee receiver\"}},\"setVAIToken(address)\":{\"params\":{\"vai_\":\"The new address of the VAI token contract\"}},\"toggleOnlyPrimeHolderMint()\":{\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"title\":\"VAI Comptroller\"},\"userdoc\":{\"methods\":{\"_setComptroller(address)\":{\"notice\":\"Sets a new comptroller\"},\"getVAIAddress()\":{\"notice\":\"Return the address of the VAI token\"},\"getVAICalculateRepayAmount(address,uint256)\":{\"notice\":\"Calculate how much VAI the user needs to repay\"},\"getVAIRepayAmount(address)\":{\"notice\":\"Get the current total VAI a user needs to repay\"},\"liquidateVAI(address,uint256,address)\":{\"notice\":\"The sender liquidates the vai minters collateral. The collateral seized is transferred to the liquidator.\"},\"mintVAI(uint256)\":{\"notice\":\"The mintVAI function mints and transfers VAI from the protocol to the user, and adds a borrow balance. The amount minted must be less than the user's Account Liquidity and the mint vai limit.\"},\"repayVAI(uint256)\":{\"notice\":\"The repay function transfers VAI into the protocol and burn, reducing the user's borrow balance. Before repaying an asset, users must first approve the VAI to access their VAI balance.\"},\"setAccessControl(address)\":{\"notice\":\"Sets the address of the access control of this contract\"},\"setBaseRate(uint256)\":{\"notice\":\"Set VAI borrow base rate\"},\"setFloatRate(uint256)\":{\"notice\":\"Set VAI borrow float rate\"},\"setMintCap(uint256)\":{\"notice\":\"Set VAI mint cap\"},\"setPrimeToken(address)\":{\"notice\":\"Set the prime token contract address\"},\"setReceiver(address)\":{\"notice\":\"Set VAI stability fee receiver address\"},\"setVAIToken(address)\":{\"notice\":\"Set the VAI token contract address\"},\"toggleOnlyPrimeHolderMint()\":{\"notice\":\"Toggle mint only for prime holder\"}},\"notice\":\"This is the implementation contract for the VAIUnitroller proxy\"}},\"settings\":{\"compilationTarget\":{\"contracts/Tokens/VAI/VAIController.sol\":\"VAIController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV5.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.5.16;\\n\\n/**\\n * @title IAccessControlManagerV5\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV5` contract.\\n */\\ninterface IAccessControlManagerV5 {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @notice Gives a function call permission to one single account\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\n     * \\t\\tMay emit a {RoleGranted} event.\\n     * @param contractAddress address of contract for which call permissions will be granted\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\n     */\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    /**\\n     * @notice Revokes an account's permission to a particular function call\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\n     * \\t\\tMay emit a {RoleRevoked} event.\\n     * @param contractAddress address of contract for which call permissions will be revoked\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\n     */\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    /**\\n     * @notice Verifies if the given account can call a praticular contract's function\\n     * @dev Since the contract is calling itself this function, we can get contracts address with msg.sender\\n     * @param account address (eoa or contract) for which call permissions will be checked\\n     * @param functionSig signature e.g. \\\"functionName(uint,bool)\\\"\\n     * @return false if the user account cannot call the particular contract function\\n     *\\n     */\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3563db4c75f7aa0b8a982bab591907dda192438a2368511b62a9c587a3e54226\"},\"contracts/Comptroller/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../Tokens/VTokens/VToken.sol\\\";\\nimport \\\"../Oracle/PriceOracle.sol\\\";\\nimport \\\"../Tokens/VAI/VAIControllerInterface.sol\\\";\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata vTokens) external returns (uint[] memory);\\n\\n    function exitMarket(address vToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address vToken, address minter, uint mintAmount) external returns (uint);\\n\\n    function mintVerify(address vToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address vToken, address redeemer, uint redeemTokens) external returns (uint);\\n\\n    function redeemVerify(address vToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address vToken, address borrower, uint borrowAmount) external returns (uint);\\n\\n    function borrowVerify(address vToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function repayBorrowVerify(\\n        address vToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external returns (uint);\\n\\n    function seizeVerify(\\n        address vTokenCollateral,\\n        address vTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external;\\n\\n    function transferAllowed(address vToken, address src, address dst, uint transferTokens) external returns (uint);\\n\\n    function transferVerify(address vToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address vTokenBorrowed,\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function setMintedVAIOf(address owner, uint amount) external returns (uint);\\n\\n    function liquidateVAICalculateSeizeTokens(\\n        address vTokenCollateral,\\n        uint repayAmount\\n    ) external view returns (uint, uint);\\n\\n    function getXVSAddress() public view returns (address);\\n\\n    function markets(address) external view returns (bool, uint);\\n\\n    function oracle() external view returns (PriceOracle);\\n\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n\\n    function getAssetsIn(address) external view returns (VToken[] memory);\\n\\n    function claimVenus(address) external;\\n\\n    function venusAccrued(address) external view returns (uint);\\n\\n    function venusSupplySpeeds(address) external view returns (uint);\\n\\n    function venusBorrowSpeeds(address) external view returns (uint);\\n\\n    function getAllMarkets() external view returns (VToken[] memory);\\n\\n    function venusSupplierIndex(address, address) external view returns (uint);\\n\\n    function venusInitialIndex() external view returns (uint224);\\n\\n    function venusBorrowerIndex(address, address) external view returns (uint);\\n\\n    function venusBorrowState(address) external view returns (uint224, uint32);\\n\\n    function venusSupplyState(address) external view returns (uint224, uint32);\\n\\n    function approvedDelegates(address borrower, address delegate) external view returns (bool);\\n\\n    function vaiController() external view returns (VAIControllerInterface);\\n\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    function protocolPaused() external view returns (bool);\\n\\n    function mintedVAIs(address user) external view returns (uint);\\n\\n    function vaiMintRate() external view returns (uint);\\n}\\n\\ninterface IVAIVault {\\n    function updatePendingRewards() external;\\n}\\n\\ninterface IComptroller {\\n    function liquidationIncentiveMantissa() external view returns (uint);\\n\\n    /*** Treasury Data ***/\\n    function treasuryAddress() external view returns (address);\\n\\n    function treasuryPercent() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xab3aca949ad85c46d8b7866330594282136109adbdab301d447108a8551e3dc3\"},\"contracts/InterestRateModels/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Venus's InterestRateModel Interface\\n * @author Venus\\n */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amnount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves,\\n        uint reserveFactorMantissa\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x7896290ed5d98f1b744676c0cf5cb0bc656befdd8a79ae4cd2d9f90d83aaa52d\"},\"contracts/Oracle/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../Tokens/VTokens/VToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n     * @notice Get the underlying price of a vToken asset\\n     * @param vToken The vToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getUnderlyingPrice(VToken vToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x0f68d0e07decba8fb9a77df1659170f310b487cc0b650f53ca6aa55ed62b28de\"},\"contracts/Tokens/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title BEP 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return success whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x7e89ffa9c0d432c4db8bd5388ff68e33934dcdb1d038d74bbed3b2fdae3eb532\"},\"contracts/Tokens/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of BEP20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance of the owner\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the BEP-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the BEP-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x05a3a7d5ab47de3964c95d706dcc18fe7583b1d064dbb74808c0f2774f347afa\"},\"contracts/Tokens/Prime/IPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title IPrime\\n * @author Venus\\n * @notice Interface for Prime Token\\n */\\ninterface IPrime {\\n    /**\\n     * @notice Executed by XVSVault whenever user's XVSVault balance changes\\n     * @param user the account address whose balance was updated\\n     */\\n    function xvsUpdated(address user) external;\\n\\n    /**\\n     * @notice accrues interest and updates score for an user for a specific market\\n     * @param user the account address for which to accrue interest and update score\\n     * @param market the market for which to accrue interest and update score\\n     */\\n    function accrueInterestAndUpdateScore(address user, address market) external;\\n\\n    /**\\n     * @notice Distributes income from market since last distribution\\n     * @param vToken the market for which to distribute the income\\n     */\\n    function accrueInterest(address vToken) external;\\n\\n    /**\\n     * @notice Returns if user is a prime holder\\n     * @param isPrimeHolder returns if the user is a prime holder\\n     */\\n    function isUserPrimeHolder(address user) external view returns (bool isPrimeHolder);\\n}\\n\",\"keccak256\":\"0x58861c0c05b8757f1a5d50b107eff479c8680878e6aa51bc93af420caf73f500\"},\"contracts/Tokens/VAI/VAI.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.5.16;\\n\\nimport \\\"./lib.sol\\\";\\n\\ncontract VAI is LibNote {\\n    // --- Auth ---\\n    mapping(address => uint) public wards;\\n\\n    function rely(address guy) external note auth {\\n        wards[guy] = 1;\\n    }\\n\\n    function deny(address guy) external note auth {\\n        wards[guy] = 0;\\n    }\\n\\n    modifier auth() {\\n        require(wards[msg.sender] == 1, \\\"VAI/not-authorized\\\");\\n        _;\\n    }\\n\\n    // --- BEP20 Data ---\\n    string public constant name = \\\"VAI Stablecoin\\\";\\n    string public constant symbol = \\\"VAI\\\";\\n    string public constant version = \\\"1\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint) public balanceOf;\\n    mapping(address => mapping(address => uint)) public allowance;\\n    mapping(address => uint) public nonces;\\n\\n    event Approval(address indexed src, address indexed guy, uint wad);\\n    event Transfer(address indexed src, address indexed dst, uint wad);\\n\\n    // --- Math ---\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"VAI math error\\\");\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"VAI math error\\\");\\n    }\\n\\n    // --- EIP712 niceties ---\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n    constructor(uint256 chainId_) public {\\n        wards[msg.sender] = 1;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                chainId_,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    // --- Token ---\\n    function transfer(address dst, uint wad) external returns (bool) {\\n        return transferFrom(msg.sender, dst, wad);\\n    }\\n\\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\\n        require(balanceOf[src] >= wad, \\\"VAI/insufficient-balance\\\");\\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\\n            require(allowance[src][msg.sender] >= wad, \\\"VAI/insufficient-allowance\\\");\\n            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\\n        }\\n        balanceOf[src] = sub(balanceOf[src], wad);\\n        balanceOf[dst] = add(balanceOf[dst], wad);\\n        emit Transfer(src, dst, wad);\\n        return true;\\n    }\\n\\n    function mint(address usr, uint wad) external auth {\\n        balanceOf[usr] = add(balanceOf[usr], wad);\\n        totalSupply = add(totalSupply, wad);\\n        emit Transfer(address(0), usr, wad);\\n    }\\n\\n    function burn(address usr, uint wad) external {\\n        require(balanceOf[usr] >= wad, \\\"VAI/insufficient-balance\\\");\\n        if (usr != msg.sender && allowance[usr][msg.sender] != uint(-1)) {\\n            require(allowance[usr][msg.sender] >= wad, \\\"VAI/insufficient-allowance\\\");\\n            allowance[usr][msg.sender] = sub(allowance[usr][msg.sender], wad);\\n        }\\n        balanceOf[usr] = sub(balanceOf[usr], wad);\\n        totalSupply = sub(totalSupply, wad);\\n        emit Transfer(usr, address(0), wad);\\n    }\\n\\n    function approve(address usr, uint wad) external returns (bool) {\\n        allowance[msg.sender][usr] = wad;\\n        emit Approval(msg.sender, usr, wad);\\n        return true;\\n    }\\n\\n    // --- Alias ---\\n    function push(address usr, uint wad) external {\\n        transferFrom(msg.sender, usr, wad);\\n    }\\n\\n    function pull(address usr, uint wad) external {\\n        transferFrom(usr, msg.sender, wad);\\n    }\\n\\n    function move(address src, address dst, uint wad) external {\\n        transferFrom(src, dst, wad);\\n    }\\n\\n    // --- Approve by signature ---\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\\n            )\\n        );\\n\\n        require(holder != address(0), \\\"VAI/invalid-address-0\\\");\\n        require(holder == ecrecover(digest, v, r, s), \\\"VAI/invalid-permit\\\");\\n        require(expiry == 0 || now <= expiry, \\\"VAI/permit-expired\\\");\\n        require(nonce == nonces[holder]++, \\\"VAI/invalid-nonce\\\");\\n        uint wad = allowed ? uint(-1) : 0;\\n        allowance[holder][spender] = wad;\\n        emit Approval(holder, spender, wad);\\n    }\\n}\\n\",\"keccak256\":\"0xaccc80ada63e1a611781aea8eacde0652e88deb8c694d2e08f88b0db7ce4aaa8\"},\"contracts/Tokens/VAI/VAIController.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.5.16;\\n\\nimport { PriceOracle } from \\\"../../Oracle/PriceOracle.sol\\\";\\nimport { VAIControllerErrorReporter } from \\\"../../Utils/ErrorReporter.sol\\\";\\nimport { Exponential } from \\\"../../Utils/Exponential.sol\\\";\\nimport { ComptrollerInterface } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport { IAccessControlManagerV5 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV5.sol\\\";\\nimport { VToken, EIP20Interface } from \\\"../VTokens/VToken.sol\\\";\\nimport { VAIUnitroller, VAIControllerStorageG4 } from \\\"./VAIUnitroller.sol\\\";\\nimport { VAI } from \\\"./VAI.sol\\\";\\nimport { IPrime } from \\\"../Prime/IPrime.sol\\\";\\nimport { VTokenInterface } from \\\"../VTokens/VTokenInterfaces.sol\\\";\\n\\n/**\\n * @title VAI Comptroller\\n * @author Venus\\n * @notice This is the implementation contract for the VAIUnitroller proxy\\n */\\ncontract VAIController is VAIControllerStorageG4, VAIControllerErrorReporter, Exponential {\\n    /// @notice Initial index used in interest computations\\n    uint public constant INITIAL_VAI_MINT_INDEX = 1e18;\\n\\n    /// @notice Emitted when Comptroller is changed\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /// @notice Emitted when mint for prime holder is changed\\n    event MintOnlyForPrimeHolder(bool previousMintEnabledOnlyForPrimeHolder, bool newMintEnabledOnlyForPrimeHolder);\\n\\n    /// @notice Emitted when Prime is changed\\n    event NewPrime(address oldPrime, address newPrime);\\n\\n    /// @notice Event emitted when VAI is minted\\n    event MintVAI(address minter, uint mintVAIAmount);\\n\\n    /// @notice Event emitted when VAI is repaid\\n    event RepayVAI(address payer, address borrower, uint repayVAIAmount);\\n\\n    /// @notice Event emitted when a borrow is liquidated\\n    event LiquidateVAI(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address vTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /// @notice Emitted when treasury guardian is changed\\n    event NewTreasuryGuardian(address oldTreasuryGuardian, address newTreasuryGuardian);\\n\\n    /// @notice Emitted when treasury address is changed\\n    event NewTreasuryAddress(address oldTreasuryAddress, address newTreasuryAddress);\\n\\n    /// @notice Emitted when treasury percent is changed\\n    event NewTreasuryPercent(uint oldTreasuryPercent, uint newTreasuryPercent);\\n\\n    /// @notice Event emitted when VAIs are minted and fee are transferred\\n    event MintFee(address minter, uint feeAmount);\\n\\n    /// @notice Emiitted when VAI base rate is changed\\n    event NewVAIBaseRate(uint256 oldBaseRateMantissa, uint256 newBaseRateMantissa);\\n\\n    /// @notice Emiitted when VAI float rate is changed\\n    event NewVAIFloatRate(uint oldFloatRateMantissa, uint newFlatRateMantissa);\\n\\n    /// @notice Emiitted when VAI receiver address is changed\\n    event NewVAIReceiver(address oldReceiver, address newReceiver);\\n\\n    /// @notice Emiitted when VAI mint cap is changed\\n    event NewVAIMintCap(uint oldMintCap, uint newMintCap);\\n\\n    /// @notice Emitted when access control address is changed by admin\\n    event NewAccessControl(address oldAccessControlAddress, address newAccessControlAddress);\\n\\n    /// @notice Emitted when VAI token address is changed by admin\\n    event NewVaiToken(address oldVaiToken, address newVaiToken);\\n\\n    /*** Main Actions ***/\\n    struct MintLocalVars {\\n        uint oErr;\\n        MathError mathErr;\\n        uint mintAmount;\\n        uint accountMintVAINew;\\n        uint accountMintableVAI;\\n    }\\n\\n    function initialize() external onlyAdmin {\\n        require(vaiMintIndex == 0, \\\"already initialized\\\");\\n\\n        vaiMintIndex = INITIAL_VAI_MINT_INDEX;\\n        accrualBlockNumber = getBlockNumber();\\n        mintCap = uint256(-1);\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    function _become(VAIUnitroller unitroller) external {\\n        require(msg.sender == unitroller.admin(), \\\"only unitroller admin can change brains\\\");\\n        require(unitroller._acceptImplementation() == 0, \\\"change not authorized\\\");\\n    }\\n\\n    /**\\n     * @notice The mintVAI function mints and transfers VAI from the protocol to the user, and adds a borrow balance.\\n     * The amount minted must be less than the user's Account Liquidity and the mint vai limit.\\n     * @param mintVAIAmount The amount of the VAI to be minted.\\n     * @return 0 on success, otherwise an error code\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function mintVAI(uint mintVAIAmount) external nonReentrant returns (uint) {\\n        if (address(comptroller) != address(0)) {\\n            require(mintVAIAmount > 0, \\\"mintVAIAmount cannot be zero\\\");\\n            require(!comptroller.protocolPaused(), \\\"protocol is paused\\\");\\n\\n            accrueVAIInterest();\\n\\n            MintLocalVars memory vars;\\n\\n            address minter = msg.sender;\\n            address _vai = vai;\\n            uint vaiTotalSupply = EIP20Interface(_vai).totalSupply();\\n            uint vaiNewTotalSupply;\\n\\n            (vars.mathErr, vaiNewTotalSupply) = addUInt(vaiTotalSupply, mintVAIAmount);\\n            require(vaiNewTotalSupply <= mintCap, \\\"mint cap reached\\\");\\n\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            (vars.oErr, vars.accountMintableVAI) = getMintableVAI(minter);\\n            if (vars.oErr != uint(Error.NO_ERROR)) {\\n                return uint(Error.REJECTION);\\n            }\\n\\n            // check that user have sufficient mintableVAI balance\\n            if (mintVAIAmount > vars.accountMintableVAI) {\\n                return fail(Error.REJECTION, FailureInfo.VAI_MINT_REJECTION);\\n            }\\n\\n            // Calculate the minted balance based on interest index\\n            uint totalMintedVAI = comptroller.mintedVAIs(minter);\\n\\n            if (totalMintedVAI > 0) {\\n                uint256 repayAmount = getVAIRepayAmount(minter);\\n                uint remainedAmount;\\n\\n                (vars.mathErr, remainedAmount) = subUInt(repayAmount, totalMintedVAI);\\n                if (vars.mathErr != MathError.NO_ERROR) {\\n                    return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\n                }\\n\\n                (vars.mathErr, pastVAIInterest[minter]) = addUInt(pastVAIInterest[minter], remainedAmount);\\n                if (vars.mathErr != MathError.NO_ERROR) {\\n                    return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\n                }\\n\\n                totalMintedVAI = repayAmount;\\n            }\\n\\n            (vars.mathErr, vars.accountMintVAINew) = addUInt(totalMintedVAI, mintVAIAmount);\\n            require(vars.mathErr == MathError.NO_ERROR, \\\"VAI_MINT_AMOUNT_CALCULATION_FAILED\\\");\\n            uint error = comptroller.setMintedVAIOf(minter, vars.accountMintVAINew);\\n            if (error != 0) {\\n                return error;\\n            }\\n\\n            uint feeAmount;\\n            uint remainedAmount;\\n            vars.mintAmount = mintVAIAmount;\\n            if (treasuryPercent != 0) {\\n                (vars.mathErr, feeAmount) = mulUInt(vars.mintAmount, treasuryPercent);\\n                if (vars.mathErr != MathError.NO_ERROR) {\\n                    return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\n                }\\n\\n                (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\n                if (vars.mathErr != MathError.NO_ERROR) {\\n                    return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\n                }\\n\\n                (vars.mathErr, remainedAmount) = subUInt(vars.mintAmount, feeAmount);\\n                if (vars.mathErr != MathError.NO_ERROR) {\\n                    return failOpaque(Error.MATH_ERROR, FailureInfo.MINT_FEE_CALCULATION_FAILED, uint(vars.mathErr));\\n                }\\n\\n                VAI(_vai).mint(treasuryAddress, feeAmount);\\n\\n                emit MintFee(minter, feeAmount);\\n            } else {\\n                remainedAmount = vars.mintAmount;\\n            }\\n\\n            VAI(_vai).mint(minter, remainedAmount);\\n            vaiMinterInterestIndex[minter] = vaiMintIndex;\\n\\n            emit MintVAI(minter, remainedAmount);\\n\\n            return uint(Error.NO_ERROR);\\n        }\\n    }\\n\\n    /**\\n     * @notice The repay function transfers VAI into the protocol and burn, reducing the user's borrow balance.\\n     * Before repaying an asset, users must first approve the VAI to access their VAI balance.\\n     * @param repayVAIAmount The amount of the VAI to be repaid.\\n     * @return 0 on success, otherwise an error code\\n     */\\n    function repayVAI(uint repayVAIAmount) external nonReentrant returns (uint, uint) {\\n        if (address(comptroller) != address(0)) {\\n            accrueVAIInterest();\\n\\n            require(repayVAIAmount > 0, \\\"repayVAIAmount cannt be zero\\\");\\n\\n            require(!comptroller.protocolPaused(), \\\"protocol is paused\\\");\\n\\n            return repayVAIFresh(msg.sender, msg.sender, repayVAIAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay VAI Internal\\n     * @notice Borrowed VAIs are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the VAI\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of VAI being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayVAIFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        MathError mErr;\\n\\n        (uint burn, uint partOfCurrentInterest, uint partOfPastInterest) = getVAICalculateRepayAmount(\\n            borrower,\\n            repayAmount\\n        );\\n\\n        VAI _vai = VAI(vai);\\n        _vai.burn(payer, burn);\\n        bool success = _vai.transferFrom(payer, receiver, partOfCurrentInterest);\\n        require(success == true, \\\"failed to transfer VAI fee\\\");\\n\\n        uint vaiBalanceBorrower = comptroller.mintedVAIs(borrower);\\n        uint accountVAINew;\\n\\n        (mErr, accountVAINew) = subUInt(vaiBalanceBorrower, burn);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_BURN_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        (mErr, accountVAINew) = subUInt(accountVAINew, partOfPastInterest);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_BURN_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        (mErr, pastVAIInterest[borrower]) = subUInt(pastVAIInterest[borrower], partOfPastInterest);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_BURN_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        uint error = comptroller.setMintedVAIOf(borrower, accountVAINew);\\n        if (error != 0) {\\n            return (error, 0);\\n        }\\n        emit RepayVAI(payer, borrower, burn);\\n\\n        return (uint(Error.NO_ERROR), burn);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the vai minters collateral. The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of vai to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateVAI(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external nonReentrant returns (uint, uint) {\\n        require(!comptroller.protocolPaused(), \\\"protocol is paused\\\");\\n\\n        uint error = vTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateVAIFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateVAIFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral by repay borrowers VAI.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param liquidator The address repaying the VAI and seizing collateral\\n     * @param borrower The borrower of this VAI to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the VAI to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment VAI.\\n     */\\n    function liquidateVAIFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal returns (uint, uint) {\\n        if (address(comptroller) != address(0)) {\\n            accrueVAIInterest();\\n\\n            /* Fail if liquidate not allowed */\\n            uint allowed = comptroller.liquidateBorrowAllowed(\\n                address(this),\\n                address(vTokenCollateral),\\n                liquidator,\\n                borrower,\\n                repayAmount\\n            );\\n            if (allowed != 0) {\\n                return (failOpaque(Error.REJECTION, FailureInfo.VAI_LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n            }\\n\\n            /* Verify vTokenCollateral market's block number equals current block number */\\n            //if (vTokenCollateral.accrualBlockNumber() != accrualBlockNumber) {\\n            if (vTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n                return (fail(Error.REJECTION, FailureInfo.VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n            }\\n\\n            /* Fail if borrower = liquidator */\\n            if (borrower == liquidator) {\\n                return (fail(Error.REJECTION, FailureInfo.VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n            }\\n\\n            /* Fail if repayAmount = 0 */\\n            if (repayAmount == 0) {\\n                return (fail(Error.REJECTION, FailureInfo.VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n            }\\n\\n            /* Fail if repayAmount = -1 */\\n            if (repayAmount == uint(-1)) {\\n                return (fail(Error.REJECTION, FailureInfo.VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n            }\\n\\n            /* Fail if repayVAI fails */\\n            (uint repayBorrowError, uint actualRepayAmount) = repayVAIFresh(liquidator, borrower, repayAmount);\\n            if (repayBorrowError != uint(Error.NO_ERROR)) {\\n                return (fail(Error(repayBorrowError), FailureInfo.VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n            }\\n\\n            /////////////////////////\\n            // EFFECTS & INTERACTIONS\\n            // (No safe failures beyond this point)\\n\\n            /* We calculate the number of collateral tokens that will be seized */\\n            (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateVAICalculateSeizeTokens(\\n                address(vTokenCollateral),\\n                actualRepayAmount\\n            );\\n            require(\\n                amountSeizeError == uint(Error.NO_ERROR),\\n                \\\"VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\"\\n            );\\n\\n            /* Revert if borrower collateral token balance < seizeTokens */\\n            require(vTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"VAI_LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n            uint seizeError;\\n            seizeError = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n\\n            /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n            require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n            /* We emit a LiquidateBorrow event */\\n            emit LiquidateVAI(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\n\\n            /* We call the defense hook */\\n            comptroller.liquidateBorrowVerify(\\n                address(this),\\n                address(vTokenCollateral),\\n                liquidator,\\n                borrower,\\n                actualRepayAmount,\\n                seizeTokens\\n            );\\n\\n            return (uint(Error.NO_ERROR), actualRepayAmount);\\n        }\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new comptroller\\n     * @dev Admin function to set a new comptroller\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setComptroller(ComptrollerInterface comptroller_) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        comptroller = comptroller_;\\n        emit NewComptroller(oldComptroller, comptroller_);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Set the prime token contract address\\n     * @param prime_ The new address of the prime token contract\\n     */\\n    function setPrimeToken(address prime_) external onlyAdmin {\\n        emit NewPrime(prime, prime_);\\n        prime = prime_;\\n    }\\n\\n    /**\\n     * @notice Set the VAI token contract address\\n     * @param vai_ The new address of the VAI token contract\\n     */\\n    function setVAIToken(address vai_) external onlyAdmin {\\n        emit NewVaiToken(vai, vai_);\\n        vai = vai_;\\n    }\\n\\n    /**\\n     * @notice Toggle mint only for prime holder\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function toggleOnlyPrimeHolderMint() external returns (uint) {\\n        _ensureAllowed(\\\"toggleOnlyPrimeHolderMint()\\\");\\n\\n        if (!mintEnabledOnlyForPrimeHolder && prime == address(0)) {\\n            return uint(Error.REJECTION);\\n        }\\n\\n        emit MintOnlyForPrimeHolder(mintEnabledOnlyForPrimeHolder, !mintEnabledOnlyForPrimeHolder);\\n        mintEnabledOnlyForPrimeHolder = !mintEnabledOnlyForPrimeHolder;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account total supply balance.\\n     *  Note that `vTokenBalance` is the number of vTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountAmountLocalVars {\\n        uint oErr;\\n        MathError mErr;\\n        uint sumSupply;\\n        uint marketSupply;\\n        uint sumBorrowPlusEffects;\\n        uint vTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n    }\\n\\n    // solhint-disable-next-line code-complexity\\n    function getMintableVAI(address minter) public view returns (uint, uint) {\\n        if (mintEnabledOnlyForPrimeHolder && !IPrime(prime).isUserPrimeHolder(minter)) {\\n            return (uint(Error.REJECTION), 0);\\n        }\\n\\n        PriceOracle oracle = comptroller.oracle();\\n        VToken[] memory enteredMarkets = comptroller.getAssetsIn(minter);\\n\\n        AccountAmountLocalVars memory vars; // Holds all our calculation results\\n\\n        uint accountMintableVAI;\\n        uint i;\\n\\n        /**\\n         * We use this formula to calculate mintable VAI amount.\\n         * totalSupplyAmount * VAIMintRate - (totalBorrowAmount + mintedVAIOf)\\n         */\\n        for (i = 0; i < enteredMarkets.length; i++) {\\n            (vars.oErr, vars.vTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = enteredMarkets[i]\\n                .getAccountSnapshot(minter);\\n            if (vars.oErr != 0) {\\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (uint(Error.SNAPSHOT_ERROR), 0);\\n            }\\n            vars.exchangeRate = Exp({ mantissa: vars.exchangeRateMantissa });\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(enteredMarkets[i]);\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (uint(Error.PRICE_ERROR), 0);\\n            }\\n            vars.oraclePrice = Exp({ mantissa: vars.oraclePriceMantissa });\\n\\n            (vars.mErr, vars.tokensToDenom) = mulExp(vars.exchangeRate, vars.oraclePrice);\\n            if (vars.mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n            // marketSupply = tokensToDenom * vTokenBalance\\n            (vars.mErr, vars.marketSupply) = mulScalarTruncate(vars.tokensToDenom, vars.vTokenBalance);\\n            if (vars.mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n            (, uint collateralFactorMantissa) = comptroller.markets(address(enteredMarkets[i]));\\n            (vars.mErr, vars.marketSupply) = mulUInt(vars.marketSupply, collateralFactorMantissa);\\n            if (vars.mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n            (vars.mErr, vars.marketSupply) = divUInt(vars.marketSupply, 1e18);\\n            if (vars.mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n            (vars.mErr, vars.sumSupply) = addUInt(vars.sumSupply, vars.marketSupply);\\n            if (vars.mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            (vars.mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(\\n                vars.oraclePrice,\\n                vars.borrowBalance,\\n                vars.sumBorrowPlusEffects\\n            );\\n            if (vars.mErr != MathError.NO_ERROR) {\\n                return (uint(Error.MATH_ERROR), 0);\\n            }\\n        }\\n\\n        uint totalMintedVAI = comptroller.mintedVAIs(minter);\\n        uint256 repayAmount = 0;\\n\\n        if (totalMintedVAI > 0) {\\n            repayAmount = getVAIRepayAmount(minter);\\n        }\\n\\n        (vars.mErr, vars.sumBorrowPlusEffects) = addUInt(vars.sumBorrowPlusEffects, repayAmount);\\n        if (vars.mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0);\\n        }\\n\\n        (vars.mErr, accountMintableVAI) = mulUInt(vars.sumSupply, comptroller.vaiMintRate());\\n        require(vars.mErr == MathError.NO_ERROR, \\\"VAI_MINT_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        (vars.mErr, accountMintableVAI) = divUInt(accountMintableVAI, 10000);\\n        require(vars.mErr == MathError.NO_ERROR, \\\"VAI_MINT_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        (vars.mErr, accountMintableVAI) = subUInt(accountMintableVAI, vars.sumBorrowPlusEffects);\\n        if (vars.mErr != MathError.NO_ERROR) {\\n            return (uint(Error.REJECTION), 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), accountMintableVAI);\\n    }\\n\\n    function _setTreasuryData(\\n        address newTreasuryGuardian,\\n        address newTreasuryAddress,\\n        uint newTreasuryPercent\\n    ) external returns (uint) {\\n        // Check caller is admin\\n        if (!(msg.sender == admin || msg.sender == treasuryGuardian)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_TREASURY_OWNER_CHECK);\\n        }\\n\\n        require(newTreasuryPercent < 1e18, \\\"treasury percent cap overflow\\\");\\n\\n        address oldTreasuryGuardian = treasuryGuardian;\\n        address oldTreasuryAddress = treasuryAddress;\\n        uint oldTreasuryPercent = treasuryPercent;\\n\\n        treasuryGuardian = newTreasuryGuardian;\\n        treasuryAddress = newTreasuryAddress;\\n        treasuryPercent = newTreasuryPercent;\\n\\n        emit NewTreasuryGuardian(oldTreasuryGuardian, newTreasuryGuardian);\\n        emit NewTreasuryAddress(oldTreasuryAddress, newTreasuryAddress);\\n        emit NewTreasuryPercent(oldTreasuryPercent, newTreasuryPercent);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function getVAIRepayRate() public view returns (uint) {\\n        PriceOracle oracle = comptroller.oracle();\\n        MathError mErr;\\n\\n        if (baseRateMantissa > 0) {\\n            if (floatRateMantissa > 0) {\\n                uint oraclePrice = oracle.getUnderlyingPrice(VToken(getVAIAddress()));\\n                if (1e18 > oraclePrice) {\\n                    uint delta;\\n                    uint rate;\\n\\n                    (mErr, delta) = subUInt(1e18, oraclePrice);\\n                    require(mErr == MathError.NO_ERROR, \\\"VAI_REPAY_RATE_CALCULATION_FAILED\\\");\\n\\n                    (mErr, delta) = mulUInt(delta, floatRateMantissa);\\n                    require(mErr == MathError.NO_ERROR, \\\"VAI_REPAY_RATE_CALCULATION_FAILED\\\");\\n\\n                    (mErr, delta) = divUInt(delta, 1e18);\\n                    require(mErr == MathError.NO_ERROR, \\\"VAI_REPAY_RATE_CALCULATION_FAILED\\\");\\n\\n                    (mErr, rate) = addUInt(delta, baseRateMantissa);\\n                    require(mErr == MathError.NO_ERROR, \\\"VAI_REPAY_RATE_CALCULATION_FAILED\\\");\\n\\n                    return rate;\\n                } else {\\n                    return baseRateMantissa;\\n                }\\n            } else {\\n                return baseRateMantissa;\\n            }\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getVAIRepayRatePerBlock() public view returns (uint) {\\n        uint yearlyRate = getVAIRepayRate();\\n\\n        MathError mErr;\\n        uint rate;\\n\\n        (mErr, rate) = divUInt(yearlyRate, getBlocksPerYear());\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_REPAY_RATE_CALCULATION_FAILED\\\");\\n\\n        return rate;\\n    }\\n\\n    function getVAIMinterInterestIndex(address minter) public view returns (uint) {\\n        uint storedIndex = vaiMinterInterestIndex[minter];\\n        // If the user minted VAI before the stability fee was introduced, accrue\\n        // starting from stability fee launch\\n        if (storedIndex == 0) {\\n            return INITIAL_VAI_MINT_INDEX;\\n        }\\n        return storedIndex;\\n    }\\n\\n    /**\\n     * @notice Get the current total VAI a user needs to repay\\n     * @param account The address of the VAI borrower\\n     * @return (uint) The total amount of VAI the user needs to repay\\n     */\\n    function getVAIRepayAmount(address account) public view returns (uint) {\\n        MathError mErr;\\n        uint delta;\\n\\n        uint amount = comptroller.mintedVAIs(account);\\n        uint interest = pastVAIInterest[account];\\n        uint totalMintedVAI;\\n        uint newInterest;\\n\\n        (mErr, totalMintedVAI) = subUInt(amount, interest);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_TOTAL_REPAY_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        (mErr, delta) = subUInt(vaiMintIndex, getVAIMinterInterestIndex(account));\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_TOTAL_REPAY_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        (mErr, newInterest) = mulUInt(delta, totalMintedVAI);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_TOTAL_REPAY_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        (mErr, newInterest) = divUInt(newInterest, 1e18);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_TOTAL_REPAY_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        (mErr, amount) = addUInt(amount, newInterest);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_TOTAL_REPAY_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Calculate how much VAI the user needs to repay\\n     * @param borrower The address of the VAI borrower\\n     * @param repayAmount The amount of VAI being returned\\n     * @return (uint, uint, uint) Amount of VAI to be burned, amount of VAI the user needs to pay in current interest and amount of VAI the user needs to pay in past interest\\n     */\\n    function getVAICalculateRepayAmount(address borrower, uint256 repayAmount) public view returns (uint, uint, uint) {\\n        MathError mErr;\\n        uint256 totalRepayAmount = getVAIRepayAmount(borrower);\\n        uint currentInterest;\\n\\n        (mErr, currentInterest) = subUInt(totalRepayAmount, comptroller.mintedVAIs(borrower));\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_BURN_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        (mErr, currentInterest) = addUInt(pastVAIInterest[borrower], currentInterest);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_BURN_AMOUNT_CALCULATION_FAILED\\\");\\n\\n        uint burn;\\n        uint partOfCurrentInterest = currentInterest;\\n        uint partOfPastInterest = pastVAIInterest[borrower];\\n\\n        if (repayAmount >= totalRepayAmount) {\\n            (mErr, burn) = subUInt(totalRepayAmount, currentInterest);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_BURN_AMOUNT_CALCULATION_FAILED\\\");\\n        } else {\\n            uint delta;\\n\\n            (mErr, delta) = mulUInt(repayAmount, 1e18);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_PART_CALCULATION_FAILED\\\");\\n\\n            (mErr, delta) = divUInt(delta, totalRepayAmount);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_PART_CALCULATION_FAILED\\\");\\n\\n            uint totalMintedAmount;\\n            (mErr, totalMintedAmount) = subUInt(totalRepayAmount, currentInterest);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_MINTED_AMOUNT_CALCULATION_FAILED\\\");\\n\\n            (mErr, burn) = mulUInt(totalMintedAmount, delta);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_BURN_AMOUNT_CALCULATION_FAILED\\\");\\n\\n            (mErr, burn) = divUInt(burn, 1e18);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_BURN_AMOUNT_CALCULATION_FAILED\\\");\\n\\n            (mErr, partOfCurrentInterest) = mulUInt(currentInterest, delta);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_CURRENT_INTEREST_AMOUNT_CALCULATION_FAILED\\\");\\n\\n            (mErr, partOfCurrentInterest) = divUInt(partOfCurrentInterest, 1e18);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_CURRENT_INTEREST_AMOUNT_CALCULATION_FAILED\\\");\\n\\n            (mErr, partOfPastInterest) = mulUInt(pastVAIInterest[borrower], delta);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_PAST_INTEREST_CALCULATION_FAILED\\\");\\n\\n            (mErr, partOfPastInterest) = divUInt(partOfPastInterest, 1e18);\\n            require(mErr == MathError.NO_ERROR, \\\"VAI_PAST_INTEREST_CALCULATION_FAILED\\\");\\n        }\\n\\n        return (burn, partOfCurrentInterest, partOfPastInterest);\\n    }\\n\\n    function accrueVAIInterest() public {\\n        MathError mErr;\\n        uint delta;\\n\\n        (mErr, delta) = mulUInt(getVAIRepayRatePerBlock(), getBlockNumber() - accrualBlockNumber);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_INTEREST_ACCURE_FAILED\\\");\\n\\n        (mErr, delta) = addUInt(delta, vaiMintIndex);\\n        require(mErr == MathError.NO_ERROR, \\\"VAI_INTEREST_ACCURE_FAILED\\\");\\n\\n        vaiMintIndex = delta;\\n        accrualBlockNumber = getBlockNumber();\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control of this contract\\n     * @dev Admin function to set the access control address\\n     * @param newAccessControlAddress New address for the access control\\n     */\\n    function setAccessControl(address newAccessControlAddress) external onlyAdmin {\\n        _ensureNonzeroAddress(newAccessControlAddress);\\n\\n        address oldAccessControlAddress = accessControl;\\n        accessControl = newAccessControlAddress;\\n        emit NewAccessControl(oldAccessControlAddress, accessControl);\\n    }\\n\\n    /**\\n     * @notice Set VAI borrow base rate\\n     * @param newBaseRateMantissa the base rate multiplied by 10**18\\n     */\\n    function setBaseRate(uint newBaseRateMantissa) external {\\n        _ensureAllowed(\\\"setBaseRate(uint256)\\\");\\n\\n        uint old = baseRateMantissa;\\n        baseRateMantissa = newBaseRateMantissa;\\n        emit NewVAIBaseRate(old, baseRateMantissa);\\n    }\\n\\n    /**\\n     * @notice Set VAI borrow float rate\\n     * @param newFloatRateMantissa the VAI float rate multiplied by 10**18\\n     */\\n    function setFloatRate(uint newFloatRateMantissa) external {\\n        _ensureAllowed(\\\"setFloatRate(uint256)\\\");\\n\\n        uint old = floatRateMantissa;\\n        floatRateMantissa = newFloatRateMantissa;\\n        emit NewVAIFloatRate(old, floatRateMantissa);\\n    }\\n\\n    /**\\n     * @notice Set VAI stability fee receiver address\\n     * @param newReceiver the address of the VAI fee receiver\\n     */\\n    function setReceiver(address newReceiver) external onlyAdmin {\\n        require(newReceiver != address(0), \\\"invalid receiver address\\\");\\n\\n        address old = receiver;\\n        receiver = newReceiver;\\n        emit NewVAIReceiver(old, newReceiver);\\n    }\\n\\n    /**\\n     * @notice Set VAI mint cap\\n     * @param _mintCap the amount of VAI that can be minted\\n     */\\n    function setMintCap(uint _mintCap) external {\\n        _ensureAllowed(\\\"setMintCap(uint256)\\\");\\n\\n        uint old = mintCap;\\n        mintCap = _mintCap;\\n        emit NewVAIMintCap(old, _mintCap);\\n    }\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    function getBlocksPerYear() public view returns (uint) {\\n        return 10512000; //(24 * 60 * 60 * 365) / 3;\\n    }\\n\\n    /**\\n     * @notice Return the address of the VAI token\\n     * @return The address of VAI\\n     */\\n    function getVAIAddress() public view returns (address) {\\n        return vai;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin can\\\");\\n        _;\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    function _ensureAllowed(string memory functionSig) private view {\\n        require(IAccessControlManagerV5(accessControl).isAllowedToCall(msg.sender, functionSig), \\\"access denied\\\");\\n    }\\n\\n    /// @notice Reverts if the passed address is zero\\n    function _ensureNonzeroAddress(address someone) private pure {\\n        require(someone != address(0), \\\"can't be zero address\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xacfc947f030b604d78f3b3fb82c674021bad4575889b90dda510dc2ce25390e2\"},\"contracts/Tokens/VAI/VAIControllerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../VTokens/VTokenInterfaces.sol\\\";\\n\\ncontract VAIControllerInterface {\\n    function getVAIAddress() public view returns (address);\\n\\n    function getMintableVAI(address minter) public view returns (uint, uint);\\n\\n    function mintVAI(address minter, uint mintVAIAmount) external returns (uint);\\n\\n    function repayVAI(address repayer, uint repayVAIAmount) external returns (uint);\\n\\n    function liquidateVAI(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint, uint);\\n\\n    function _initializeVenusVAIState(uint blockNumber) external returns (uint);\\n\\n    function updateVenusVAIMintIndex() external returns (uint);\\n\\n    function calcDistributeVAIMinterVenus(address vaiMinter) external returns (uint, uint, uint, uint);\\n\\n    function getVAIRepayAmount(address account) public view returns (uint);\\n}\\n\",\"keccak256\":\"0x17eb6edb1262c4effcad86f614ff20d00256278485054b11aa5cf011ff6f8a86\"},\"contracts/Tokens/VAI/VAIControllerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport { ComptrollerInterface } from \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\n\\ncontract VAIUnitrollerAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Active brains of Unitroller\\n     */\\n    address public vaiControllerImplementation;\\n\\n    /**\\n     * @notice Pending brains of Unitroller\\n     */\\n    address public pendingVAIControllerImplementation;\\n}\\n\\ncontract VAIControllerStorageG1 is VAIUnitrollerAdminStorage {\\n    ComptrollerInterface public comptroller;\\n\\n    struct VenusVAIState {\\n        /// @notice The last updated venusVAIMintIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice The Venus VAI state\\n    VenusVAIState public venusVAIState;\\n\\n    /// @notice The Venus VAI state initialized\\n    bool public isVenusVAIInitialized;\\n\\n    /// @notice The Venus VAI minter index as of the last time they accrued XVS\\n    mapping(address => uint) public venusVAIMinterIndex;\\n}\\n\\ncontract VAIControllerStorageG2 is VAIControllerStorageG1 {\\n    /// @notice Treasury Guardian address\\n    address public treasuryGuardian;\\n\\n    /// @notice Treasury address\\n    address public treasuryAddress;\\n\\n    /// @notice Fee percent of accrued interest with decimal 18\\n    uint256 public treasuryPercent;\\n\\n    /// @notice Guard variable for re-entrancy checks\\n    bool internal _notEntered;\\n\\n    /// @notice The base rate for stability fee\\n    uint public baseRateMantissa;\\n\\n    /// @notice The float rate for stability fee\\n    uint public floatRateMantissa;\\n\\n    /// @notice The address for VAI interest receiver\\n    address public receiver;\\n\\n    /// @notice Accumulator of the total earned interest rate since the opening of the market. For example: 0.6 (60%)\\n    uint public vaiMintIndex;\\n\\n    /// @notice Block number that interest was last accrued at\\n    uint internal accrualBlockNumber;\\n\\n    /// @notice Global vaiMintIndex as of the most recent balance-changing action for user\\n    mapping(address => uint) internal vaiMinterInterestIndex;\\n\\n    /// @notice Tracks the amount of mintedVAI of a user that represents the accrued interest\\n    mapping(address => uint) public pastVAIInterest;\\n\\n    /// @notice VAI mint cap\\n    uint public mintCap;\\n\\n    /// @notice Access control manager address\\n    address public accessControl;\\n}\\n\\ncontract VAIControllerStorageG3 is VAIControllerStorageG2 {\\n    /// @notice The address of the prime contract. It can be a ZERO address\\n    address public prime;\\n\\n    /// @notice Tracks if minting is enabled only for prime token holders. Only used if prime is set\\n    bool public mintEnabledOnlyForPrimeHolder;\\n}\\n\\ncontract VAIControllerStorageG4 is VAIControllerStorageG3 {\\n    /// @notice The address of the VAI token\\n    address internal vai;\\n}\\n\",\"keccak256\":\"0x3c7f0cb93574c25914ae35219bb56ca76f4403f1905925e13c7d0c49116e8720\"},\"contracts/Tokens/VAI/VAIUnitroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Utils/ErrorReporter.sol\\\";\\nimport \\\"./VAIControllerStorage.sol\\\";\\n\\n/**\\n * @title VAI Unitroller\\n * @author Venus\\n * @notice This is the proxy contract for the VAIComptroller\\n */\\ncontract VAIUnitroller is VAIUnitrollerAdminStorage, VAIControllerErrorReporter {\\n    /**\\n     * @notice Emitted when pendingVAIControllerImplementation is changed\\n     */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n     * @notice Emitted when pendingVAIControllerImplementation is accepted, which means comptroller implementation is updated\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n        }\\n\\n        address oldPendingImplementation = pendingVAIControllerImplementation;\\n\\n        pendingVAIControllerImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingVAIControllerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n     * @dev Admin function for new implementation to accept it's role as implementation\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation\\n        if (msg.sender != pendingVAIControllerImplementation) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = vaiControllerImplementation;\\n        address oldPendingImplementation = pendingVAIControllerImplementation;\\n\\n        vaiControllerImplementation = pendingVAIControllerImplementation;\\n\\n        pendingVAIControllerImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, vaiControllerImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingVAIControllerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function() external payable {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = vaiControllerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n            let free_mem_ptr := mload(0x40)\\n            returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n            switch success\\n            case 0 {\\n                revert(free_mem_ptr, returndatasize)\\n            }\\n            default {\\n                return(free_mem_ptr, returndatasize)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x190b7cf07aefcde79f5eb89cbf32cf9c1b0f1a9c21e5d4e84875ae880e07d3c2\"},\"contracts/Tokens/VAI/lib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.5.16;\\n\\ncontract LibNote {\\n    event LogNote(\\n        bytes4 indexed sig,\\n        address indexed usr,\\n        bytes32 indexed arg1,\\n        bytes32 indexed arg2,\\n        bytes data\\n    ) anonymous;\\n\\n    modifier note() {\\n        _;\\n        assembly {\\n            // log an 'anonymous' event with a constant 6 words of calldata\\n            // and four indexed topics: selector, caller, arg1 and arg2\\n            let mark := msize() // end of memory ensures zero\\n            mstore(0x40, add(mark, 288)) // update free memory pointer\\n            mstore(mark, 0x20) // bytes type data offset\\n            mstore(add(mark, 0x20), 224) // bytes size (padded)\\n            calldatacopy(add(mark, 0x40), 0, 224) // bytes payload\\n            log4(\\n                mark,\\n                288, // calldata\\n                shl(224, shr(224, calldataload(0))), // msg.sig\\n                caller(), // msg.sender\\n                calldataload(4), // arg1\\n                calldataload(36) // arg2\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x63dceabe7331a78e04306883f77921e20bca79930e92468779bfe81cbe239c68\"},\"contracts/Tokens/VTokens/VToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../Utils/ErrorReporter.sol\\\";\\nimport \\\"../../Utils/Exponential.sol\\\";\\nimport \\\"../../Tokens/EIP20Interface.sol\\\";\\nimport \\\"../../Tokens/EIP20NonStandardInterface.sol\\\";\\nimport \\\"../../InterestRateModels/InterestRateModel.sol\\\";\\nimport \\\"./VTokenInterfaces.sol\\\";\\nimport { IAccessControlManagerV5 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV5.sol\\\";\\n\\n/**\\n * @title Venus's vToken Contract\\n * @notice Abstract base for vTokens\\n * @author Venus\\n */\\ncontract VToken is VTokenInterface, Exponential, TokenErrorReporter {\\n    struct MintLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    struct RedeemLocalVars {\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    // @custom:event Emits Transfer event\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    // @custom:event Emits Approval event on successful approve\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        transferAllowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({ mantissa: exchangeRateCurrent() });\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        ensureNoMathError(mErr);\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another vToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed vToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits Transfer event\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewPendingAdmin event with old and new admin addresses\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        ensureAdmin(msg.sender);\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n     * @dev Admin function for pending admin to accept role and update admin\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewAdmin event on successful acceptance\\n    // @custom:event Emits NewPendingAdmin event with null new pending admin\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin\\n        if (msg.sender != pendingAdmin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and sets a new reserve factor for the protocol using `_setReserveFactorFresh`\\n     * @dev Governor function to accrue interest and set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewReserveFactor event\\n    function _setReserveFactor(uint newReserveFactorMantissa_) external nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_setReserveFactor(uint256)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control manager of this contract\\n     * @dev Admin function to set the access control address\\n     * @param newAccessControlManagerAddress New address for the access control\\n     * @return uint 0=success, otherwise will revert\\n     */\\n    function setAccessControlManager(address newAccessControlManagerAddress) external returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        ensureNonZeroAddress(newAccessControlManagerAddress);\\n\\n        emit NewAccessControlManager(accessControlManager, newAccessControlManagerAddress);\\n        accessControlManager = newAccessControlManagerAddress;\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to protocol share reserve\\n     * @param reduceAmount_ Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits ReservesReduced event\\n    function _reduceReserves(uint reduceAmount_) external nonReentrant returns (uint) {\\n        ensureAllowed(\\\"_reduceReserves(uint256)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // If reserves were reduced in accrueInterest\\n        if (reduceReservesBlockNumber == block.number) return (uint(Error.NO_ERROR));\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount_);\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint vTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), vTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this vToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this vToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this vToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Governance function to set new threshold of block difference after which funds will be sent to the protocol share reserve\\n     * @param newReduceReservesBlockDelta_ block difference value\\n     */\\n    function setReduceReservesBlockDelta(uint256 newReduceReservesBlockDelta_) external returns (uint) {\\n        require(newReduceReservesBlockDelta_ > 0, \\\"Invalid Input\\\");\\n        ensureAllowed(\\\"setReduceReservesBlockDelta(uint256)\\\");\\n        emit NewReduceReservesBlockDelta(reduceReservesBlockDelta, newReduceReservesBlockDelta_);\\n        reduceReservesBlockDelta = newReduceReservesBlockDelta_;\\n    }\\n\\n    /**\\n     * @notice Sets protocol share reserve contract address\\n     * @param protcolShareReserve_ The address of protocol share reserve contract\\n     */\\n    function setProtocolShareReserve(address payable protcolShareReserve_) external returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n        ensureNonZeroAddress(protcolShareReserve_);\\n        emit NewProtocolShareReserve(protocolShareReserve, protcolShareReserve_);\\n        protocolShareReserve = protcolShareReserve_;\\n    }\\n\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public {\\n        ensureAdmin(msg.sender);\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = block.number;\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     * up to the current block and writes new checkpoint to storage and\\n     * reduce spread reserves to protocol share reserve\\n     * if currentBlock - reduceReservesBlockNumber >= blockDelta\\n     */\\n    // @custom:event Emits AccrueInterest event\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = block.number;\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        ensureNoMathError(mathErr);\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({ mantissa: borrowRateMantissa }), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(\\n            Exp({ mantissa: reserveFactorMantissa }),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n                    uint(mathErr)\\n                );\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        (mathErr, blockDelta) = subUInt(currentBlockNumber, reduceReservesBlockNumber);\\n        ensureNoMathError(mathErr);\\n        if (blockDelta >= reduceReservesBlockDelta) {\\n            reduceReservesBlockNumber = currentBlockNumber;\\n            _reduceReservesFresh(totalReservesNew);\\n        }\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new comptroller for the market\\n     * @dev Admin function to set a new comptroller\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // @custom:event Emits NewComptroller event\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        ensureAdmin(msg.sender);\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Governance function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel_ The new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel_) public returns (uint) {\\n        ensureAllowed(\\\"_setInterestRateModel(address)\\\");\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel_);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the VToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        ensureNoMathError(err);\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Transfers `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srvTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srvTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srvTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mint failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param receiver The address of the account which is receiving the vTokens\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfInternal(address receiver, uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted mintBehalf failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintBelahfFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintBehalfFresh(msg.sender, receiver, mintAmount);\\n    }\\n\\n    /**\\n     * @notice Payer supplies assets into the market and receiver receives vTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param payer The address of the account which is paying the underlying token\\n     * @param receiver The address of the account which is receiving vToken\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintBehalfFresh(address payer, address receiver, uint mintAmount) internal returns (uint, uint) {\\n        ensureNonZeroAddress(receiver);\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), receiver, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the payer and the mintAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the vToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(payer, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of vTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(\\n            vars.actualMintAmount,\\n            Exp({ mantissa: vars.exchangeRateMantissa })\\n        );\\n        ensureNoMathError(vars.mathErr);\\n\\n        /*\\n         * We calculate the new total supply of vTokens and receiver token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[receiver] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[receiver], vars.mintTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[receiver] = vars.accountTokensNew;\\n\\n        /* We emit a MintBehalf event, and a Transfer event */\\n        emit MintBehalf(payer, receiver, vars.actualMintAmount, vars.mintTokens, vars.accountTokensNew);\\n        emit Transfer(address(this), receiver, vars.mintTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.mintVerify(address(this), receiver, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems vTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of vTokens to redeem into underlying\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems vTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming vTokens\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice User redeems vTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of vTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming vTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(\\n                Exp({ mantissa: vars.exchangeRateMantissa }),\\n                redeemTokensIn\\n            );\\n            ensureNoMathError(vars.mathErr);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(\\n                redeemAmountIn,\\n                Exp({ mantissa: vars.exchangeRateMantissa })\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n\\n        uint feeAmount;\\n        uint remainedAmount;\\n        if (IComptroller(address(comptroller)).treasuryPercent() != 0) {\\n            (vars.mathErr, feeAmount) = mulUInt(\\n                vars.redeemAmount,\\n                IComptroller(address(comptroller)).treasuryPercent()\\n            );\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, feeAmount) = divUInt(feeAmount, 1e18);\\n            ensureNoMathError(vars.mathErr);\\n\\n            (vars.mathErr, remainedAmount) = subUInt(vars.redeemAmount, feeAmount);\\n            ensureNoMathError(vars.mathErr);\\n\\n            doTransferOut(address(uint160(IComptroller(address(comptroller)).treasuryAddress())), feeAmount);\\n\\n            emit RedeemFee(redeemer, feeAmount, vars.redeemTokens);\\n        } else {\\n            remainedAmount = vars.redeemAmount;\\n        }\\n\\n        doTransferOut(redeemer, remainedAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, remainedAmount, vars.redeemTokens, vars.accountTokensNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function borrowInternal(\\n        address borrower,\\n        address payable receiver,\\n        uint borrowAmount\\n    ) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(borrower, receiver, borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Receiver gets the borrow on behalf of the borrower address\\n     * @dev Before calling this function, ensure that the interest has been accrued\\n     * @param borrower The borrower, on behalf of whom to borrow\\n     * @param receiver The account that would receive the funds (can be the same as the borrower)\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint Returns 0 on success, otherwise revert (see ErrorReporter.sol for details).\\n     */\\n    function borrowFresh(address borrower, address payable receiver, uint borrowAmount) internal returns (uint) {\\n        /* Revert if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        /* Revert if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            revert(\\\"math error\\\");\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(receiver, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to another borrowing account\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer The account paying off the borrow\\n     * @param borrower The account with the debt being payed off\\n     * @param repayAmount The amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (\\n                failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed),\\n                0\\n            );\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (\\n                failOpaque(\\n                    Error.MATH_ERROR,\\n                    FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n                    uint(vars.mathErr)\\n                ),\\n                0\\n            );\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        ensureNoMathError(vars.mathErr);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = vTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, vTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this vToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param vTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function liquidateBorrowFresh(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            repayAmount\\n        );\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify vTokenCollateral market's block number equals current block number */\\n        if (vTokenCollateral.accrualBlockNumber() != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(\\n            address(this),\\n            address(vTokenCollateral),\\n            actualRepayAmount\\n        );\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(vTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(vTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = vTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(vTokenCollateral), seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.liquidateBorrowVerify(\\n            address(this),\\n            address(vTokenCollateral),\\n            liquidator,\\n            borrower,\\n            actualRepayAmount,\\n            seizeTokens\\n        );\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another vToken.\\n     *  Its absolutely critical to use msg.sender as the seizer vToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed vToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of vTokens to seize\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function seizeInternal(\\n        address seizerToken,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense and prime accrue interest hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new reserve factor for the protocol (requires fresh interest accrual)\\n     * @dev Governance function to set a new reserve factor\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and adds reserves by transferring from `msg.sender`\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The vToken must handle variations between BEP-20 and BNB underlying.\\n         *  On success, the vToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to protocol share reserve contract\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        if (reduceAmount == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew = totalReserves - reduceAmount;\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(protocolShareReserve, reduceAmount);\\n\\n        IProtocolShareReserveV5(protocolShareReserve).updateAssetsState(\\n            address(comptroller),\\n            underlying,\\n            IProtocolShareReserveV5.IncomeType.SPREAD\\n        );\\n\\n        emit ReservesReduced(protocolShareReserve, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (requires fresh interest accrual)\\n     * @dev Governance function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint Returns 0 on success, otherwise returns a failure code (see ErrorReporter.sol for details).\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != block.number) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return Tuple of error code and the calculated balance or 0 if error code is non-zero\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the vToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Tuple of error code and calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    function ensureAllowed(string memory functionSig) private view {\\n        require(\\n            IAccessControlManagerV5(accessControlManager).isAllowedToCall(msg.sender, functionSig),\\n            \\\"access denied\\\"\\n        );\\n    }\\n\\n    function ensureAdmin(address caller_) private view {\\n        require(caller_ == admin, \\\"Unauthorized\\\");\\n    }\\n\\n    function ensureNoMathError(MathError mErr) private pure {\\n        require(mErr == MathError.NO_ERROR, \\\"math error\\\");\\n    }\\n\\n    function ensureNonZeroAddress(address address_) private pure {\\n        require(address_ != address(0), \\\"zero address\\\");\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n}\\n\",\"keccak256\":\"0xfebe762631e75f9d48481cbe2f03b8b74d9c8e99206a9b5f3ac452b20d13f68f\"},\"contracts/Tokens/VTokens/VTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../InterestRateModels/InterestRateModel.sol\\\";\\n\\ninterface IProtocolShareReserveV5 {\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION\\n    }\\n\\n    function updateAssetsState(address comptroller, address asset, IncomeType kind) external;\\n}\\n\\ncontract VTokenStorageBase {\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-vToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first VTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping(address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Underlying asset for this VToken\\n     */\\n    address public underlying;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n\\n    /**\\n     * @notice delta block after which reserves will be reduced\\n     */\\n    uint public reduceReservesBlockDelta;\\n\\n    /**\\n     * @notice last block number at which reserves were reduced\\n     */\\n    uint public reduceReservesBlockNumber;\\n\\n    /**\\n     * @notice address of protocol share reserve contract\\n     */\\n    address payable public protocolShareReserve;\\n\\n    /**\\n     * @notice address of accessControlManager\\n     */\\n\\n    address public accessControlManager;\\n}\\n\\ncontract VTokenStorage is VTokenStorageBase {\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\\ncontract VTokenInterface is VTokenStorage {\\n    /**\\n     * @notice Indicator that this is a vToken contract (for inspection)\\n     */\\n    bool public constant isVToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted behalf by payer to receiver\\n     */\\n    event MintBehalf(address payer, address receiver, uint mintAmount, uint mintTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens, uint256 totalSupply);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed and fee is transferred\\n     */\\n    event RedeemFee(address redeemer, uint feeAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address vTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin has been updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address protocolShareReserve, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Event emitted when block delta for reduce reserves get updated\\n     */\\n    event NewReduceReservesBlockDelta(uint256 oldReduceReservesBlockDelta, uint256 newReduceReservesBlockDelta);\\n\\n    /**\\n     * @notice Event emitted when address of ProtocolShareReserve contract get updated\\n     */\\n    event NewProtocolShareReserve(address indexed oldProtocolShareReserve, address indexed newProtocolShareReserve);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /// @notice Emitted when access control address is changed by admin\\n    event NewAccessControlManager(address oldAccessControlAddress, address newAccessControlAddress);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n\\n    function totalBorrowsCurrent() external returns (uint);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _acceptAdmin() external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view returns (uint);\\n\\n    function supplyRatePerBlock() external view returns (uint);\\n\\n    function getCash() external view returns (uint);\\n\\n    function exchangeRateCurrent() public returns (uint);\\n\\n    function accrueInterest() public returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n\\n    /*** Admin Function ***/\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n\\n    function borrowBalanceStored(address account) public view returns (uint);\\n\\n    function exchangeRateStored() public view returns (uint);\\n}\\n\\ncontract VBep20Interface {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n\\n    function mintBehalf(address receiver, uint mintAmount) external returns (uint);\\n\\n    function redeem(uint redeemTokens) external returns (uint);\\n\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n\\n    function borrow(uint borrowAmount) external returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        VTokenInterface vTokenCollateral\\n    ) external returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract VDelegatorInterface {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) public;\\n}\\n\\ncontract VDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0x2f12533847458414b423cc85677489709d772bec4e48933ae983d6861202a41b\"},\"contracts/Utils/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Careful Math\\n * @author Venus\\n * @notice Derived from OpenZeppelin's SafeMath library\\n *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n */\\ncontract CarefulMath {\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n     * @dev Multiplies two numbers, returns an error on overflow.\\n     */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, returns an error on overflow.\\n     */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev add a and b and then subtract c\\n     */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0x5bd84fb723641b98d0559272323b90ce42595f025af89cfb214d8c064c9ee3c3\"},\"contracts/Utils/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n        INSUFFICIENT_BALANCE_FOR_VAI,\\n        MARKET_NOT_COLLATERAL\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n        SET_VAI_MINT_RATE_CHECK,\\n        SET_VAICONTROLLER_OWNER_CHECK,\\n        SET_MINTED_VAI_REJECTION,\\n        SET_TREASURY_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n        TOKEN_PRICE_ERROR\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n        TOKEN_GET_UNDERLYING_PRICE_ERROR,\\n        REPAY_VAI_COMPTROLLER_REJECTION,\\n        REPAY_VAI_FRESHNESS_CHECK,\\n        VAI_MINT_EXCHANGE_CALCULATION_FAILED,\\n        SFT_MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract VAIControllerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED, // The sender is not authorized to perform this action.\\n        REJECTION, // The action would violate the comptroller, vaicontroller policy.\\n        SNAPSHOT_ERROR, // The comptroller could not get the account borrows and exchange rate from the market.\\n        PRICE_ERROR, // The comptroller could not obtain a required price of an asset.\\n        MATH_ERROR, // A math calculation error occurred.\\n        INSUFFICIENT_BALANCE_FOR_VAI // Caller does not have sufficient balance to mint VAI.\\n    }\\n\\n    enum FailureInfo {\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        VAI_MINT_REJECTION,\\n        VAI_BURN_REJECTION,\\n        VAI_LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        VAI_LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        VAI_LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        VAI_LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        VAI_LIQUIDATE_FRESHNESS_CHECK,\\n        VAI_LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        VAI_LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        VAI_LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        VAI_LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_FEE_CALCULATION_FAILED,\\n        SET_TREASURY_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\",\"keccak256\":\"0xc77c4dd91f93f778c5048fa0e68cc0cad2fd4a308add54f0172c507858ce06c8\"},\"contracts/Utils/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Venus\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: rational }));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({ mantissa: result }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: scaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: descaledMantissa }));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) internal pure returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) internal pure returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({ mantissa: 0 }));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({ mantissa: 0 }));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({ mantissa: product }));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) internal pure returns (MathError, Exp memory) {\\n        return mulExp(Exp({ mantissa: a }), Exp({ mantissa: b }));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) internal pure returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) internal pure returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\",\"keccak256\":\"0x92a68e9f6de3a70b103aa0ddb68faa8e60c443b1268e03853d5054171fe8e290\"},\"contracts/Utils/ExponentialNoError.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint internal constant expScale = 1e18;\\n    uint internal constant doubleScale = 1e36;\\n    uint internal constant halfExpScale = expScale / 2;\\n    uint internal constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: add_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: sub_(a.mantissa, b.mantissa) });\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b.mantissa) / expScale });\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b.mantissa) / doubleScale });\\n    }\\n\\n    function mul_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: mul_(a.mantissa, b) });\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(mul_(a.mantissa, expScale), b.mantissa) });\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa) });\\n    }\\n\\n    function div_(Double memory a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(a.mantissa, b) });\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({ mantissa: div_(mul_(a, doubleScale), b) });\\n    }\\n}\\n\",\"keccak256\":\"0x237e63d9ad2bf232d70f854b8867a465913cab4d2033d295ec7736bf618ca302\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614515806100206000396000f3fe608060405234801561001057600080fd5b506004361061027e5760003560e01c8063691e45ac1161015c578063b49b1005116100ce578063d24febad11610087578063d24febad1461061d578063e44e616814610653578063ee1fa41e14610683578063f20fd8f41461068b578063f7260d3e146106b1578063f851a440146106b95761027e565b8063b49b1005146105cf578063b9ee8726146105d7578063c32094c7146105df578063c5f956af14610605578063c7ee005e1461060d578063cbeb2b28146106155761027e565b806376c71ca11161012057806376c71ca11461058157806378c2f922146105895780638129fc1c146105af578063b06bb426146105b7578063b2b481bc146105bf578063b2eafc39146105c75761027e565b8063691e45ac146104e45780636fe74a211461052e578063718da7ee1461054b578063741de1481461057157806375c3de43146105795761027e565b80633b5a0a64116101f55780635ce73240116101b95780635ce73240146104825780635fe3b5671461048a57806360c954ef1461049257806361b3311c146104ae57806365097954146104d4578063657bdf94146104dc5761027e565b80633b5a0a64146103fd5780633b72fbef1461041a5780634070a0c9146104225780634576b5db1461043f5780634712ee7d146104655761027e565b80631d08837b116102475780631d08837b146103405780631d504dc61461035d578063234f89771461038357806324650602146103a957806326782247146103cf5780633785d1d6146103d75761027e565b80623b58841461028357806304ef9d58146102a757806311b3d5e7146102c157806313007d551461031057806319129e5a14610318575b600080fd5b61028b6106c1565b604080516001600160a01b039092168252519081900360200190f35b6102af6106d0565b60408051918252519081900360200190f35b6102f7600480360360608110156102d757600080fd5b506001600160a01b038135811691602081013591604090910135166106d6565b6040805192835260208301919091528051918290030190f35b61028b61089b565b61033e6004803603602081101561032e57600080fd5b50356001600160a01b03166108aa565b005b61033e6004803603602081101561035657600080fd5b5035610965565b61033e6004803603602081101561037357600080fd5b50356001600160a01b03166109e1565b6102af6004803603602081101561039957600080fd5b50356001600160a01b0316610b40565b6102af600480360360208110156103bf57600080fd5b50356001600160a01b0316610b77565b61028b610b89565b6102f7600480360360208110156103ed57600080fd5b50356001600160a01b0316610b98565b61033e6004803603602081101561041357600080fd5b503561153e565b6102af6115bb565b61033e6004803603602081101561043857600080fd5b50356115c1565b6102af6004803603602081101561045557600080fd5b50356001600160a01b031661163c565b6102af6004803603602081101561047b57600080fd5b50356116ca565b6102af611f4a565b61028b611f50565b61049a611f5f565b604080519115158252519081900360200190f35b61033e600480360360208110156104c457600080fd5b50356001600160a01b0316611f68565b6102af612022565b6102af61202e565b610510600480360360408110156104fa57600080fd5b506001600160a01b03813516906020013561210d565b60408051938452602084019290925282820152519081900360600190f35b6102f76004803603602081101561054457600080fd5b5035612687565b61033e6004803603602081101561056157600080fd5b50356001600160a01b0316612821565b6102af61292f565b6102af612936565b6102af6129ad565b6102af6004803603602081101561059f57600080fd5b50356001600160a01b03166129b3565b61033e612c48565b61028b612d0f565b6102af612d1e565b61028b612d24565b61033e612d33565b6102af612e3c565b61033e600480360360208110156105f557600080fd5b50356001600160a01b031661310a565b61028b6131c4565b61028b6131d3565b61028b6131e2565b6102af6004803603606081101561063357600080fd5b506001600160a01b038135811691602081013590911690604001356131f1565b61065b613394565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b61049a6133b2565b6102af600480360360208110156106a157600080fd5b50356001600160a01b03166133c2565b61028b6133d4565b61028b6133e3565b6002546001600160a01b031681565b600a5481565b600b54600090819060ff1661071f576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b600b805460ff19169055600480546040805163084bf5ab60e31b815290516001600160a01b039092169263425fad58928282019260209290829003018186803b15801561076b57600080fd5b505afa15801561077f573d6000803e3d6000fd5b505050506040513d602081101561079557600080fd5b5051156107de576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b6000836001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561081b57600080fd5b505af115801561082f573d6000803e3d6000fd5b505050506040513d602081101561084557600080fd5b5051905080156108725761086581600681111561085e57fe5b60086133f2565b9250600091506108849050565b61087e33878787613458565b92509250505b600b805460ff191660011790559094909350915050565b6014546001600160a01b031681565b6000546001600160a01b031633146108fa576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b610903816139b3565b601480546001600160a01b038381166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0f1eca7612e020f6e4582bcead0573eba4b5f7b56668754c6aed82ef12057dd49281900390910190a15050565b61099a6040518060400160405280601481526020017373657442617365526174652875696e743235362960601b815250613a06565b600c805490829055604080518281526020810184905281517fc84c32795e68685ec107b0e94ae126ef464095f342c7e2e0fec06a23d2e8677e929181900390910190a15050565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d6020811015610a4457600080fd5b50516001600160a01b03163314610a8c5760405162461bcd60e51b81526004018080602001828103825260278152602001806144ba6027913960400191505060405180910390fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ac757600080fd5b505af1158015610adb573d6000803e3d6000fd5b505050506040513d6020811015610af157600080fd5b505115610b3d576040805162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b604482015290519081900360640190fd5b50565b6001600160a01b03811660009081526011602052604081205480610b6f57670de0b6b3a7640000915050610b72565b90505b919050565b60076020526000908152604090205481565b6001546001600160a01b031681565b6015546000908190600160a01b900460ff168015610c2c575060155460408051630e3da90d60e21b81526001600160a01b038681166004830152915191909216916338f6a434916024808301926020929190829003018186803b158015610bfe57600080fd5b505afa158015610c12573d6000803e3d6000fd5b505050506040513d6020811015610c2857600080fd5b5051155b15610c3d5750600290506000611539565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d6020811015610cb757600080fd5b50516004805460408051632aff3bff60e21b81526001600160a01b03898116948201949094529051939450606093929091169163abfceffc91602480820192600092909190829003018186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d4d57600080fd5b8101908080516040519392919084640100000000821115610d6d57600080fd5b908301906020820185811115610d8257600080fd5b8251866020820283011164010000000082111715610d9f57600080fd5b82525081516020918201928201910280838360005b83811015610dcc578181015183820152602001610db4565b505050509050016040525050509050610de36142c8565b6000805b835181101561127057838181518110610dfc57fe5b60200260200101516001600160a01b031663c37f68e2896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d6080811015610e8357600080fd5b5080516020820151604083015160609093015160e087015260c086019290925260a085019190915280845215610ec75760035b965060009550611539945050505050565b60405180602001604052808460e00151815250836101200181905250846001600160a01b031663fc57d4df858381518110610efe57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d6020811015610f7657600080fd5b50516101008401819052610f8b576004610eb6565b604080516020810190915261010084015181526101408401819052610120840151610fb591613b27565b610160850181905260208501826003811115610fcd57fe5b6003811115610fd857fe5b9052506000905083602001516003811115610fef57fe5b14610ffb576005610eb6565b61100e8361016001518460a00151613c12565b606085018190526020850182600381111561102557fe5b600381111561103057fe5b905250600090508360200151600381111561104757fe5b14611053576005610eb6565b60045484516000916001600160a01b031690638e8f294b9087908590811061107757fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050604080518083038186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d60408110156110ee57600080fd5b506020015160608501519091506111059082613c65565b606086018190526020860182600381111561111c57fe5b600381111561112757fe5b905250600090508460200151600381111561113e57fe5b146111585760055b97506000965061153995505050505050565b61116e8460600151670de0b6b3a7640000613ca4565b606086018190526020860182600381111561118557fe5b600381111561119057fe5b90525060009050846020015160038111156111a757fe5b146111b3576005611146565b6111c584604001518560600151613ccf565b60408601819052602086018260038111156111dc57fe5b60038111156111e757fe5b90525060009050846020015160038111156111fe57fe5b1461120a576005611146565b6112228461014001518560c001518660800151613cf5565b608086018190526020860182600381111561123957fe5b600381111561124457fe5b905250600090508460200151600381111561125b57fe5b14611267576005611146565b50600101610de7565b60048054604080516315e3f14f60e11b81526001600160a01b038c811694820194909452905160009390921691632bc7e29e91602480820192602092909190829003018186803b1580156112c357600080fd5b505afa1580156112d7573d6000803e3d6000fd5b505050506040513d60208110156112ed57600080fd5b5051905060008115611305576113028a6129b3565b90505b611313856080015182613ccf565b608087018190526020870182600381111561132a57fe5b600381111561133557fe5b905250600090508560200151600381111561134c57fe5b146113675760055b9850600097506115399650505050505050565b6113ee8560400151600460009054906101000a90046001600160a01b03166001600160a01b031663bec04f726040518163ffffffff1660e01b815260040160206040518083038186803b1580156113bd57600080fd5b505afa1580156113d1573d6000803e3d6000fd5b505050506040513d60208110156113e757600080fd5b5051613c65565b8660200181965082600381111561140157fe5b600381111561140c57fe5b905250600090508560200151600381111561142357fe5b1461145f5760405162461bcd60e51b81526004018080602001828103825260228152602001806143a36022913960400191505060405180910390fd5b61146b84612710613ca4565b8660200181965082600381111561147e57fe5b600381111561148957fe5b90525060009050856020015160038111156114a057fe5b146114dc5760405162461bcd60e51b81526004018080602001828103825260228152602001806143a36022913960400191505060405180910390fd5b6114ea848660800151613d51565b866020018196508260038111156114fd57fe5b600381111561150857fe5b905250600090508560200151600381111561151f57fe5b1461152b576002611354565b600098509296505050505050505b915091565b61157460405180604001604052806015815260200174736574466c6f6174526174652875696e743235362960581b815250613a06565b600d805490829055604080518281526020810184905281517f546fb35dbbd92233aecc22b5a11a6791e5db7ec14f62e49cbac2a10c0437f561929181900390910190a15050565b600c5481565b6115f5604051806040016040528060138152602001727365744d696e744361702875696e743235362960681b815250613a06565b6013805490829055604080518281526020810184905281517f43862b3eea2df8fce70329f3f84cbcad220f47a73be46c5e00df25165a6e1695929181900390910190a15050565b600080546001600160a01b031633146116625761165b600160026133f2565b9050610b72565b600480546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d929181900390910190a160009392505050565b600b5460009060ff16611711576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b600b805460ff191690556004546001600160a01b031615611f385760008211611781576040805162461bcd60e51b815260206004820152601c60248201527f6d696e74564149416d6f756e742063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b600480546040805163084bf5ab60e31b815290516001600160a01b039092169263425fad58928282019260209290829003018186803b1580156117c357600080fd5b505afa1580156117d7573d6000803e3d6000fd5b505050506040513d60208110156117ed57600080fd5b505115611836576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b61183e612d33565b61184661433b565b601654604080516318160ddd60e01b8152905133926001600160a01b03169160009183916318160ddd916004808301926020929190829003018186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d60208110156118b957600080fd5b5051905060006118c98288613ccf565b866020018193508260038111156118dc57fe5b60038111156118e757fe5b90525050601354811115611935576040805162461bcd60e51b815260206004820152601060248201526f1b5a5b9d0818d85c081c995858da195960821b604482015290519081900360640190fd5b60008560200151600381111561194757fe5b1461197457611968600560168760200151600381111561196357fe5b613d74565b95505050505050611f38565b61197d84610b98565b608087015280865215611991576002611968565b84608001518711156119a957611968600260056133f2565b60048054604080516315e3f14f60e11b81526001600160a01b0388811694820194909452905160009390921691632bc7e29e91602480820192602092909190829003018186803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b505050506040513d6020811015611a2657600080fd5b505190508015611b3a576000611a3b866129b3565b90506000611a498284613d51565b89602001819350826003811115611a5c57fe5b6003811115611a6757fe5b9052506000905088602001516003811115611a7e57fe5b14611aa957611a9a600560168a60200151600381111561196357fe5b98505050505050505050611f38565b6001600160a01b038716600090815260126020526040902054611acc9082613ccf565b6001600160a01b03891660009081526012602090815260409091208290558a01826003811115611af857fe5b6003811115611b0357fe5b9052506000905088602001516003811115611b1a57fe5b14611b3657611a9a600560168a60200151600381111561196357fe5b5090505b611b448189613ccf565b6060880181905260208801826003811115611b5b57fe5b6003811115611b6657fe5b9052506000905086602001516003811115611b7d57fe5b14611bb95760405162461bcd60e51b81526004018080602001828103825260228152602001806143a36022913960400191505060405180910390fd5b6004805460608801516040805163fd51a3ad60e01b81526001600160a01b038a8116958201959095526024810192909252516000939092169163fd51a3ad9160448082019260209290919082900301818787803b158015611c1957600080fd5b505af1158015611c2d573d6000803e3d6000fd5b505050506040513d6020811015611c4357600080fd5b505190508015611c5b579650611f3895505050505050565b60408701899052600a54600090819015611e5857611c7f8960400151600a54613c65565b8a602001819450826003811115611c9257fe5b6003811115611c9d57fe5b9052506000905089602001516003811115611cb457fe5b14611ce057611cd0600560168b60200151600381111561196357fe5b9950505050505050505050611f38565b611cf282670de0b6b3a7640000613ca4565b8a602001819450826003811115611d0557fe5b6003811115611d1057fe5b9052506000905089602001516003811115611d2757fe5b14611d4357611cd0600560168b60200151600381111561196357fe5b611d51896040015183613d51565b8a602001819350826003811115611d6457fe5b6003811115611d6f57fe5b9052506000905089602001516003811115611d8657fe5b14611da257611cd0600560168b60200151600381111561196357fe5b600954604080516340c10f1960e01b81526001600160a01b039283166004820152602481018590529051918916916340c10f199160448082019260009290919082900301818387803b158015611df757600080fd5b505af1158015611e0b573d6000803e3d6000fd5b5050604080516001600160a01b038c1681526020810186905281517fb0715a6d41a37c1b0672c22c09a31a0642c1fb3f9efa2d5fd5c6d2d891ee78c69450908190039091019150a1611e5f565b5060408801515b866001600160a01b03166340c10f1989836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611ebf57600080fd5b505af1158015611ed3573d6000803e3d6000fd5b5050600f546001600160a01b038b1660008181526011602090815260409182902093909355805191825291810185905281517e2e68ab1600fc5e7290e2ceaa79e2f86b4dbaca84a48421e167e0b40409218a9450908190039091019150a16000611cd0565b600b805460ff19166001179055919050565b600d5481565b6004546001600160a01b031681565b60065460ff1681565b6000546001600160a01b03163314611fb8576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b601654604080516001600160a01b039283168152918316602083015280517fe45150fb0a88e2274ecbca05ddde9925dd64b6e126ae0fa23ee2d42e668a49d39281900390910190a1601680546001600160a01b0319166001600160a01b0392909216919091179055565b670de0b6b3a764000081565b600061206e6040518060400160405280601b81526020017f746f67676c654f6e6c795072696d65486f6c6465724d696e7428290000000000815250613a06565b601554600160a01b900460ff1615801561209157506015546001600160a01b0316155b1561209e5750600261210a565b60155460408051600160a01b90920460ff161580158352602083015280517f8efa7b6021d602e0cdef814b7435609ee40deb2a0352ca676d10045750516a5f9281900390910190a16015805460ff60a01b198116600160a01b9182900460ff1615909102179055600090505b90565b600080600080600061211e876129b3565b60048054604080516315e3f14f60e11b81526001600160a01b038c81169482019490945290519394506000936121a89386931691632bc7e29e916024808301926020929190829003018186803b15801561217757600080fd5b505afa15801561218b573d6000803e3d6000fd5b505050506040513d60208110156121a157600080fd5b5051613d51565b909350905060008360038111156121bb57fe5b146121f75760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6001600160a01b03881660009081526012602052604090205461221a9082613ccf565b9093509050600083600381111561222d57fe5b146122695760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6001600160a01b0388166000908152601260205260408120548290848a106122e9576122958585613d51565b909650925060008660038111156122a857fe5b146122e45760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b612676565b60006122fd8b670de0b6b3a7640000613c65565b9097509050600087600381111561231057fe5b14612362576040805162461bcd60e51b815260206004820152601b60248201527f5641495f504152545f43414c43554c4154494f4e5f4641494c45440000000000604482015290519081900360640190fd5b61236c8187613ca4565b9097509050600087600381111561237f57fe5b146123d1576040805162461bcd60e51b815260206004820152601b60248201527f5641495f504152545f43414c43554c4154494f4e5f4641494c45440000000000604482015290519081900360640190fd5b60006123dd8787613d51565b909850905060008860038111156123f057fe5b1461242c5760405162461bcd60e51b81526004018080602001828103825260248152602001806144756024913960400191505060405180910390fd5b6124368183613c65565b9098509450600088600381111561244957fe5b146124855760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b61249785670de0b6b3a7640000613ca4565b909850945060008860038111156124aa57fe5b146124e65760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6124f08683613c65565b9098509350600088600381111561250357fe5b1461253f5760405162461bcd60e51b815260040180806020018281038252602e8152602001806143e7602e913960400191505060405180910390fd5b61255184670de0b6b3a7640000613ca4565b9098509350600088600381111561256457fe5b146125a05760405162461bcd60e51b815260040180806020018281038252602e8152602001806143e7602e913960400191505060405180910390fd5b6001600160a01b038d166000908152601260205260409020546125c39083613c65565b909850925060008860038111156125d657fe5b146126125760405162461bcd60e51b815260040180806020018281038252602481526020018061437f6024913960400191505060405180910390fd5b61262483670de0b6b3a7640000613ca4565b9098509250600088600381111561263757fe5b146126735760405162461bcd60e51b815260040180806020018281038252602481526020018061437f6024913960400191505060405180910390fd5b50505b919750955093505050509250925092565b600b54600090819060ff166126d0576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b600b805460ff191690556004546001600160a01b03161561280d576126f3612d33565b60008311612748576040805162461bcd60e51b815260206004820152601c60248201527f7265706179564149416d6f756e742063616e6e74206265207a65726f00000000604482015290519081900360640190fd5b600480546040805163084bf5ab60e31b815290516001600160a01b039092169263425fad58928282019260209290829003018186803b15801561278a57600080fd5b505afa15801561279e573d6000803e3d6000fd5b505050506040513d60208110156127b457600080fd5b5051156127fd576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b612808333385613de2565b915091505b600b805460ff191660011790559092909150565b6000546001600160a01b03163314612871576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b6001600160a01b0381166128cc576040805162461bcd60e51b815260206004820152601860248201527f696e76616c696420726563656976657220616464726573730000000000000000604482015290519081900360640190fd5b600e80546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517f4df62dd7d9cc4f480a167c19c616ae5d5bb40db6d0c2bc66dba57068225f00d8929181900390910190a15050565b62a0668090565b600080612941612e3c565b90506000806129578361295261292f565b613ca4565b9092509050600082600381111561296a57fe5b146129a65760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b9250505090565b60135481565b600080600080600460009054906101000a90046001600160a01b03166001600160a01b0316632bc7e29e866040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015612a2457600080fd5b505afa158015612a38573d6000803e3d6000fd5b505050506040513d6020811015612a4e57600080fd5b50516001600160a01b03861660009081526012602052604081205491925080612a778484613d51565b90965091506000866003811115612a8a57fe5b14612ac65760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b612ada600f54612ad58a610b40565b613d51565b90965094506000866003811115612aed57fe5b14612b295760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b612b338583613c65565b90965090506000866003811115612b4657fe5b14612b825760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b612b9481670de0b6b3a7640000613ca4565b90965090506000866003811115612ba757fe5b14612be35760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b612bed8482613ccf565b90965093506000866003811115612c0057fe5b14612c3c5760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b50919695505050505050565b6000546001600160a01b03163314612c98576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b600f5415612ce3576040805162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b670de0b6b3a7640000600f55612cf761424d565b601055600019601355600b805460ff19166001179055565b6003546001600160a01b031681565b600f5481565b6008546001600160a01b031681565b600080612d52612d41612936565b601054612d4c61424d565b03613c65565b90925090506000826003811115612d6557fe5b14612db7576040805162461bcd60e51b815260206004820152601a60248201527f5641495f494e5445524553545f4143435552455f4641494c4544000000000000604482015290519081900360640190fd5b612dc381600f54613ccf565b90925090506000826003811115612dd657fe5b14612e28576040805162461bcd60e51b815260206004820152601a60248201527f5641495f494e5445524553545f4143435552455f4641494c4544000000000000604482015290519081900360640190fd5b600f819055612e3561424d565b6010555050565b60048054604080516307dc0d1d60e41b8152905160009384936001600160a01b031692637dc0d1d09281830192602092829003018186803b158015612e8057600080fd5b505afa158015612e94573d6000803e3d6000fd5b505050506040513d6020811015612eaa57600080fd5b5051600c54909150600090156130ff57600d54156130f3576000826001600160a01b031663fc57d4df612edb6131e2565b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015612f2157600080fd5b505afa158015612f35573d6000803e3d6000fd5b505050506040513d6020811015612f4b57600080fd5b50519050670de0b6b3a76400008110156130e657600080612f74670de0b6b3a764000084613d51565b90945091506000846003811115612f8757fe5b14612fc35760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b612fcf82600d54613c65565b90945091506000846003811115612fe257fe5b1461301e5760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b61303082670de0b6b3a7640000613ca4565b9094509150600084600381111561304357fe5b1461307f5760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b61308b82600c54613ccf565b9094509050600084600381111561309e57fe5b146130da5760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b945061210a9350505050565b600c54935050505061210a565b600c549250505061210a565b60009250505061210a565b6000546001600160a01b0316331461315a576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b601554604080516001600160a01b039283168152918316602083015280517ffb26401242c61b503dd09c29da64a5d4f451549f574b882a40bcdc64ee68b83c9281900390910190a1601580546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031681565b6015546001600160a01b031681565b6016546001600160a01b031690565b600080546001600160a01b031633148061321557506008546001600160a01b031633145b61322c57613225600160176133f2565b905061338d565b670de0b6b3a76400008210613288576040805162461bcd60e51b815260206004820152601d60248201527f74726561737572792070657263656e7420636170206f766572666c6f77000000604482015290519081900360640190fd5b6008805460098054600a80546001600160a01b038a81166001600160a01b031980881682179098558a821697851697909717909455908790556040805194841680865260208601969096528051929093169390927f29f06ea15931797ebaed313d81d100963dc22cb213cb4ce2737b5a62b1a8b1e892918290030190a1604080516001600160a01b0380851682528816602082015281517f8de763046d7b8f08b6c3d03543de1d615309417842bb5d2d62f110f65809ddac929181900390910190a1604080518281526020810187905281517f0893f8f4101baaabbeb513f96761e7a36eb837403c82cc651c292a4abdc94ed7929181900390910190a1600093505050505b9392505050565b6005546001600160e01b03811690600160e01b900463ffffffff1682565b601554600160a01b900460ff1681565b60126020526000908152604090205481565b600e546001600160a01b031681565b6000546001600160a01b031681565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083600681111561342157fe5b83601781111561342d57fe5b604080519283526020830191909152600082820152519081900360600190a182600681111561338d57fe5b60045460009081906001600160a01b0316156139aa57613476612d33565b6004805460408051632fe3f38f60e11b815230938101939093526001600160a01b038681166024850152898116604485015288811660648501526084840188905290516000939190921691635fc7e71e9160a48082019260209290919082900301818787803b1580156134e857600080fd5b505af11580156134fc573d6000803e3d6000fd5b505050506040513d602081101561351257600080fd5b505190508015613536576135296002600a83613d74565b9250600091506139aa9050565b61353e61424d565b846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561357757600080fd5b505afa15801561358b573d6000803e3d6000fd5b505050506040513d60208110156135a157600080fd5b5051146135b457613529600260096133f2565b866001600160a01b0316866001600160a01b031614156135da576135296002600f6133f2565b846135eb576135296002600d6133f2565b600019851415613601576135296002600c6133f2565b60008061360f898989613de2565b9092509050811561363f5761363082600681111561362957fe5b60106133f2565b9450600093506139aa92505050565b600480546040805163a78dc77560e01b81526001600160a01b038a8116948201949094526024810185905281516000948594169263a78dc7759260448082019391829003018186803b15801561369457600080fd5b505afa1580156136a8573d6000803e3d6000fd5b505050506040513d60408110156136be57600080fd5b508051602090910151909250905081156137095760405162461bcd60e51b815260040180806020018281038252603781526020018061443e6037913960400191505060405180910390fd5b80886001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561376057600080fd5b505afa158015613774573d6000803e3d6000fd5b505050506040513d602081101561378a57600080fd5b505110156137df576040805162461bcd60e51b815260206004820152601c60248201527f5641495f4c49515549444154455f5345495a455f544f4f5f4d55434800000000604482015290519081900360640190fd5b6040805163b2a02ff160e01b81526001600160a01b038d811660048301528c811660248301526044820184905291516000928b169163b2a02ff191606480830192602092919082900301818787803b15801561383a57600080fd5b505af115801561384e573d6000803e3d6000fd5b505050506040513d602081101561386457600080fd5b5051905080156138b2576040805162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b604482015290519081900360640190fd5b604080516001600160a01b03808f168252808e1660208301528183018790528b1660608201526080810184905290517f42d401f96718a0c42e5cea8108973f0022677b7e2e5f4ee19851b2de7a0394e79181900360a00190a160048054604080516347ef3b3b60e01b815230938101939093526001600160a01b038c811660248501528f811660448501528e811660648501526084840188905260a4840186905290519116916347ef3b3b9160c480830192600092919082900301818387803b15801561397e57600080fd5b505af1158015613992573d6000803e3d6000fd5b506000925061399f915050565b975092955050505050505b94509492505050565b6001600160a01b038116610b3d576040805162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b604482015290519081900360640190fd5b601454604080516318c5e8ab60e01b81523360048201818152602483019384528551604484015285516001600160a01b03909516946318c5e8ab949293879391606490910190602085019080838360005b83811015613a6f578181015183820152602001613a57565b50505050905090810190601f168015613a9c5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015613aba57600080fd5b505afa158015613ace573d6000803e3d6000fd5b505050506040513d6020811015613ae457600080fd5b5051610b3d576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b6000613b3161436b565b600080613b4686600001518660000151613c65565b90925090506000826003811115613b5957fe5b14613b7857506040805160208101909152600081529092509050613c0b565b600080613b8d6706f05b59d3b2000084613ccf565b90925090506000826003811115613ba057fe5b14613bc257506040805160208101909152600081529094509250613c0b915050565b600080613bd783670de0b6b3a7640000613ca4565b90925090506000826003811115613bea57fe5b14613bf157fe5b604080516020810190915290815260009750955050505050505b9250929050565b6000806000613c1f61436b565b613c298686614251565b90925090506000826003811115613c3c57fe5b14613c4d5750915060009050613c0b565b6000613c58826142b9565b9350935050509250929050565b60008083613c7857506000905080613c0b565b83830283858281613c8557fe5b0414613c9957506002915060009050613c0b565b600092509050613c0b565b60008082613cb85750600190506000613c0b565b6000838581613cc357fe5b04915091509250929050565b600080838301848110613ce757600092509050613c0b565b506002915060009050613c0b565b6000806000613d0261436b565b613d0c8787614251565b90925090506000826003811115613d1f57fe5b14613d305750915060009050613d49565b613d42613d3c826142b9565b86613ccf565b9350935050505b935093915050565b600080838311613d68575060009050818303613c0b565b50600390506000613c0b565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846006811115613da357fe5b846017811115613daf57fe5b604080519283526020830191909152818101859052519081900360600190a1836006811115613dda57fe5b949350505050565b600080600080600080613df5888861210d565b60165460408051632770a7eb60e21b81526001600160a01b038f8116600483015260248201879052915195985093965091945016918291639dc29fac91604480830192600092919082900301818387803b158015613e5257600080fd5b505af1158015613e66573d6000803e3d6000fd5b5050600e54604080516323b872dd60e01b81526001600160a01b038f8116600483015292831660248201526044810188905290516000945091851692506323b872dd91606480830192602092919082900301818787803b158015613ec957600080fd5b505af1158015613edd573d6000803e3d6000fd5b505050506040513d6020811015613ef357600080fd5b50519050600181151514613f4e576040805162461bcd60e51b815260206004820152601a60248201527f6661696c656420746f207472616e736665722056414920666565000000000000604482015290519081900360640190fd5b60048054604080516315e3f14f60e11b81526001600160a01b038e811694820194909452905160009390921691632bc7e29e91602480820192602092909190829003018186803b158015613fa157600080fd5b505afa158015613fb5573d6000803e3d6000fd5b505050506040513d6020811015613fcb57600080fd5b505190506000613fdb8288613d51565b90985090506000886003811115613fee57fe5b1461402a5760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6140348186613d51565b9098509050600088600381111561404757fe5b146140835760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6001600160a01b038c166000908152601260205260409020546140a69086613d51565b6001600160a01b038e166000908152601260205260408120919091559098508860038111156140d157fe5b1461410d5760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b031663fd51a3ad8e846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561418457600080fd5b505af1158015614198573d6000803e3d6000fd5b505050506040513d60208110156141ae57600080fd5b5051905080156141cc57995060009850613d49975050505050505050565b7f1db858e6f7e1a0d5e92c10c6507d42b3dabfe0a4867fe90c5a14d9963662ef7e8e8e8a60405180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001828152602001935050505060405180910390a160009e979d50969b505050505050505050505050565b4390565b600061425b61436b565b60008061426c866000015186613c65565b9092509050600082600381111561427f57fe5b1461429e57506040805160208101909152600081529092509050613c0b565b60408051602081019091529081526000969095509350505050565b51670de0b6b3a7640000900490565b6040805161018081019091526000808252602082019081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161431c61436b565b815260200161432961436b565b815260200161433661436b565b905290565b6040805160a081019091526000808252602082019081526020016000815260200160008152602001600081525090565b604051806020016040528060008152509056fe5641495f504153545f494e5445524553545f43414c43554c4154494f4e5f4641494c45445641495f4d494e545f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f4255524e5f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f43555252454e545f494e5445524553545f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f544f54414c5f52455041595f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f414d4f554e545f5345495a455f4641494c45445641495f4d494e5445445f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f52455041595f524154455f43414c43554c4154494f4e5f4641494c45446f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676520627261696e73a265627a7a72315820009e524be3c8d5acac97b880ce3cecc5477c99e672e23f9350ebfab2d2b6eabd64736f6c63430005100032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027e5760003560e01c8063691e45ac1161015c578063b49b1005116100ce578063d24febad11610087578063d24febad1461061d578063e44e616814610653578063ee1fa41e14610683578063f20fd8f41461068b578063f7260d3e146106b1578063f851a440146106b95761027e565b8063b49b1005146105cf578063b9ee8726146105d7578063c32094c7146105df578063c5f956af14610605578063c7ee005e1461060d578063cbeb2b28146106155761027e565b806376c71ca11161012057806376c71ca11461058157806378c2f922146105895780638129fc1c146105af578063b06bb426146105b7578063b2b481bc146105bf578063b2eafc39146105c75761027e565b8063691e45ac146104e45780636fe74a211461052e578063718da7ee1461054b578063741de1481461057157806375c3de43146105795761027e565b80633b5a0a64116101f55780635ce73240116101b95780635ce73240146104825780635fe3b5671461048a57806360c954ef1461049257806361b3311c146104ae57806365097954146104d4578063657bdf94146104dc5761027e565b80633b5a0a64146103fd5780633b72fbef1461041a5780634070a0c9146104225780634576b5db1461043f5780634712ee7d146104655761027e565b80631d08837b116102475780631d08837b146103405780631d504dc61461035d578063234f89771461038357806324650602146103a957806326782247146103cf5780633785d1d6146103d75761027e565b80623b58841461028357806304ef9d58146102a757806311b3d5e7146102c157806313007d551461031057806319129e5a14610318575b600080fd5b61028b6106c1565b604080516001600160a01b039092168252519081900360200190f35b6102af6106d0565b60408051918252519081900360200190f35b6102f7600480360360608110156102d757600080fd5b506001600160a01b038135811691602081013591604090910135166106d6565b6040805192835260208301919091528051918290030190f35b61028b61089b565b61033e6004803603602081101561032e57600080fd5b50356001600160a01b03166108aa565b005b61033e6004803603602081101561035657600080fd5b5035610965565b61033e6004803603602081101561037357600080fd5b50356001600160a01b03166109e1565b6102af6004803603602081101561039957600080fd5b50356001600160a01b0316610b40565b6102af600480360360208110156103bf57600080fd5b50356001600160a01b0316610b77565b61028b610b89565b6102f7600480360360208110156103ed57600080fd5b50356001600160a01b0316610b98565b61033e6004803603602081101561041357600080fd5b503561153e565b6102af6115bb565b61033e6004803603602081101561043857600080fd5b50356115c1565b6102af6004803603602081101561045557600080fd5b50356001600160a01b031661163c565b6102af6004803603602081101561047b57600080fd5b50356116ca565b6102af611f4a565b61028b611f50565b61049a611f5f565b604080519115158252519081900360200190f35b61033e600480360360208110156104c457600080fd5b50356001600160a01b0316611f68565b6102af612022565b6102af61202e565b610510600480360360408110156104fa57600080fd5b506001600160a01b03813516906020013561210d565b60408051938452602084019290925282820152519081900360600190f35b6102f76004803603602081101561054457600080fd5b5035612687565b61033e6004803603602081101561056157600080fd5b50356001600160a01b0316612821565b6102af61292f565b6102af612936565b6102af6129ad565b6102af6004803603602081101561059f57600080fd5b50356001600160a01b03166129b3565b61033e612c48565b61028b612d0f565b6102af612d1e565b61028b612d24565b61033e612d33565b6102af612e3c565b61033e600480360360208110156105f557600080fd5b50356001600160a01b031661310a565b61028b6131c4565b61028b6131d3565b61028b6131e2565b6102af6004803603606081101561063357600080fd5b506001600160a01b038135811691602081013590911690604001356131f1565b61065b613394565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b61049a6133b2565b6102af600480360360208110156106a157600080fd5b50356001600160a01b03166133c2565b61028b6133d4565b61028b6133e3565b6002546001600160a01b031681565b600a5481565b600b54600090819060ff1661071f576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b600b805460ff19169055600480546040805163084bf5ab60e31b815290516001600160a01b039092169263425fad58928282019260209290829003018186803b15801561076b57600080fd5b505afa15801561077f573d6000803e3d6000fd5b505050506040513d602081101561079557600080fd5b5051156107de576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b6000836001600160a01b031663a6afed956040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561081b57600080fd5b505af115801561082f573d6000803e3d6000fd5b505050506040513d602081101561084557600080fd5b5051905080156108725761086581600681111561085e57fe5b60086133f2565b9250600091506108849050565b61087e33878787613458565b92509250505b600b805460ff191660011790559094909350915050565b6014546001600160a01b031681565b6000546001600160a01b031633146108fa576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b610903816139b3565b601480546001600160a01b038381166001600160a01b0319831617928390556040805192821680845293909116602083015280517f0f1eca7612e020f6e4582bcead0573eba4b5f7b56668754c6aed82ef12057dd49281900390910190a15050565b61099a6040518060400160405280601481526020017373657442617365526174652875696e743235362960601b815250613a06565b600c805490829055604080518281526020810184905281517fc84c32795e68685ec107b0e94ae126ef464095f342c7e2e0fec06a23d2e8677e929181900390910190a15050565b806001600160a01b031663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1a57600080fd5b505afa158015610a2e573d6000803e3d6000fd5b505050506040513d6020811015610a4457600080fd5b50516001600160a01b03163314610a8c5760405162461bcd60e51b81526004018080602001828103825260278152602001806144ba6027913960400191505060405180910390fd5b806001600160a01b031663c1e803346040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ac757600080fd5b505af1158015610adb573d6000803e3d6000fd5b505050506040513d6020811015610af157600080fd5b505115610b3d576040805162461bcd60e51b815260206004820152601560248201527418da185b99d9481b9bdd08185d5d1a1bdc9a5e9959605a1b604482015290519081900360640190fd5b50565b6001600160a01b03811660009081526011602052604081205480610b6f57670de0b6b3a7640000915050610b72565b90505b919050565b60076020526000908152604090205481565b6001546001600160a01b031681565b6015546000908190600160a01b900460ff168015610c2c575060155460408051630e3da90d60e21b81526001600160a01b038681166004830152915191909216916338f6a434916024808301926020929190829003018186803b158015610bfe57600080fd5b505afa158015610c12573d6000803e3d6000fd5b505050506040513d6020811015610c2857600080fd5b5051155b15610c3d5750600290506000611539565b6000600460009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d6020811015610cb757600080fd5b50516004805460408051632aff3bff60e21b81526001600160a01b03898116948201949094529051939450606093929091169163abfceffc91602480820192600092909190829003018186803b158015610d1057600080fd5b505afa158015610d24573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d4d57600080fd5b8101908080516040519392919084640100000000821115610d6d57600080fd5b908301906020820185811115610d8257600080fd5b8251866020820283011164010000000082111715610d9f57600080fd5b82525081516020918201928201910280838360005b83811015610dcc578181015183820152602001610db4565b505050509050016040525050509050610de36142c8565b6000805b835181101561127057838181518110610dfc57fe5b60200260200101516001600160a01b031663c37f68e2896040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060806040518083038186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d6080811015610e8357600080fd5b5080516020820151604083015160609093015160e087015260c086019290925260a085019190915280845215610ec75760035b965060009550611539945050505050565b60405180602001604052808460e00151815250836101200181905250846001600160a01b031663fc57d4df858381518110610efe57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015610f4c57600080fd5b505afa158015610f60573d6000803e3d6000fd5b505050506040513d6020811015610f7657600080fd5b50516101008401819052610f8b576004610eb6565b604080516020810190915261010084015181526101408401819052610120840151610fb591613b27565b610160850181905260208501826003811115610fcd57fe5b6003811115610fd857fe5b9052506000905083602001516003811115610fef57fe5b14610ffb576005610eb6565b61100e8361016001518460a00151613c12565b606085018190526020850182600381111561102557fe5b600381111561103057fe5b905250600090508360200151600381111561104757fe5b14611053576005610eb6565b60045484516000916001600160a01b031690638e8f294b9087908590811061107757fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b03168152602001915050604080518083038186803b1580156110c457600080fd5b505afa1580156110d8573d6000803e3d6000fd5b505050506040513d60408110156110ee57600080fd5b506020015160608501519091506111059082613c65565b606086018190526020860182600381111561111c57fe5b600381111561112757fe5b905250600090508460200151600381111561113e57fe5b146111585760055b97506000965061153995505050505050565b61116e8460600151670de0b6b3a7640000613ca4565b606086018190526020860182600381111561118557fe5b600381111561119057fe5b90525060009050846020015160038111156111a757fe5b146111b3576005611146565b6111c584604001518560600151613ccf565b60408601819052602086018260038111156111dc57fe5b60038111156111e757fe5b90525060009050846020015160038111156111fe57fe5b1461120a576005611146565b6112228461014001518560c001518660800151613cf5565b608086018190526020860182600381111561123957fe5b600381111561124457fe5b905250600090508460200151600381111561125b57fe5b14611267576005611146565b50600101610de7565b60048054604080516315e3f14f60e11b81526001600160a01b038c811694820194909452905160009390921691632bc7e29e91602480820192602092909190829003018186803b1580156112c357600080fd5b505afa1580156112d7573d6000803e3d6000fd5b505050506040513d60208110156112ed57600080fd5b5051905060008115611305576113028a6129b3565b90505b611313856080015182613ccf565b608087018190526020870182600381111561132a57fe5b600381111561133557fe5b905250600090508560200151600381111561134c57fe5b146113675760055b9850600097506115399650505050505050565b6113ee8560400151600460009054906101000a90046001600160a01b03166001600160a01b031663bec04f726040518163ffffffff1660e01b815260040160206040518083038186803b1580156113bd57600080fd5b505afa1580156113d1573d6000803e3d6000fd5b505050506040513d60208110156113e757600080fd5b5051613c65565b8660200181965082600381111561140157fe5b600381111561140c57fe5b905250600090508560200151600381111561142357fe5b1461145f5760405162461bcd60e51b81526004018080602001828103825260228152602001806143a36022913960400191505060405180910390fd5b61146b84612710613ca4565b8660200181965082600381111561147e57fe5b600381111561148957fe5b90525060009050856020015160038111156114a057fe5b146114dc5760405162461bcd60e51b81526004018080602001828103825260228152602001806143a36022913960400191505060405180910390fd5b6114ea848660800151613d51565b866020018196508260038111156114fd57fe5b600381111561150857fe5b905250600090508560200151600381111561151f57fe5b1461152b576002611354565b600098509296505050505050505b915091565b61157460405180604001604052806015815260200174736574466c6f6174526174652875696e743235362960581b815250613a06565b600d805490829055604080518281526020810184905281517f546fb35dbbd92233aecc22b5a11a6791e5db7ec14f62e49cbac2a10c0437f561929181900390910190a15050565b600c5481565b6115f5604051806040016040528060138152602001727365744d696e744361702875696e743235362960681b815250613a06565b6013805490829055604080518281526020810184905281517f43862b3eea2df8fce70329f3f84cbcad220f47a73be46c5e00df25165a6e1695929181900390910190a15050565b600080546001600160a01b031633146116625761165b600160026133f2565b9050610b72565b600480546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d929181900390910190a160009392505050565b600b5460009060ff16611711576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b600b805460ff191690556004546001600160a01b031615611f385760008211611781576040805162461bcd60e51b815260206004820152601c60248201527f6d696e74564149416d6f756e742063616e6e6f74206265207a65726f00000000604482015290519081900360640190fd5b600480546040805163084bf5ab60e31b815290516001600160a01b039092169263425fad58928282019260209290829003018186803b1580156117c357600080fd5b505afa1580156117d7573d6000803e3d6000fd5b505050506040513d60208110156117ed57600080fd5b505115611836576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b61183e612d33565b61184661433b565b601654604080516318160ddd60e01b8152905133926001600160a01b03169160009183916318160ddd916004808301926020929190829003018186803b15801561188f57600080fd5b505afa1580156118a3573d6000803e3d6000fd5b505050506040513d60208110156118b957600080fd5b5051905060006118c98288613ccf565b866020018193508260038111156118dc57fe5b60038111156118e757fe5b90525050601354811115611935576040805162461bcd60e51b815260206004820152601060248201526f1b5a5b9d0818d85c081c995858da195960821b604482015290519081900360640190fd5b60008560200151600381111561194757fe5b1461197457611968600560168760200151600381111561196357fe5b613d74565b95505050505050611f38565b61197d84610b98565b608087015280865215611991576002611968565b84608001518711156119a957611968600260056133f2565b60048054604080516315e3f14f60e11b81526001600160a01b0388811694820194909452905160009390921691632bc7e29e91602480820192602092909190829003018186803b1580156119fc57600080fd5b505afa158015611a10573d6000803e3d6000fd5b505050506040513d6020811015611a2657600080fd5b505190508015611b3a576000611a3b866129b3565b90506000611a498284613d51565b89602001819350826003811115611a5c57fe5b6003811115611a6757fe5b9052506000905088602001516003811115611a7e57fe5b14611aa957611a9a600560168a60200151600381111561196357fe5b98505050505050505050611f38565b6001600160a01b038716600090815260126020526040902054611acc9082613ccf565b6001600160a01b03891660009081526012602090815260409091208290558a01826003811115611af857fe5b6003811115611b0357fe5b9052506000905088602001516003811115611b1a57fe5b14611b3657611a9a600560168a60200151600381111561196357fe5b5090505b611b448189613ccf565b6060880181905260208801826003811115611b5b57fe5b6003811115611b6657fe5b9052506000905086602001516003811115611b7d57fe5b14611bb95760405162461bcd60e51b81526004018080602001828103825260228152602001806143a36022913960400191505060405180910390fd5b6004805460608801516040805163fd51a3ad60e01b81526001600160a01b038a8116958201959095526024810192909252516000939092169163fd51a3ad9160448082019260209290919082900301818787803b158015611c1957600080fd5b505af1158015611c2d573d6000803e3d6000fd5b505050506040513d6020811015611c4357600080fd5b505190508015611c5b579650611f3895505050505050565b60408701899052600a54600090819015611e5857611c7f8960400151600a54613c65565b8a602001819450826003811115611c9257fe5b6003811115611c9d57fe5b9052506000905089602001516003811115611cb457fe5b14611ce057611cd0600560168b60200151600381111561196357fe5b9950505050505050505050611f38565b611cf282670de0b6b3a7640000613ca4565b8a602001819450826003811115611d0557fe5b6003811115611d1057fe5b9052506000905089602001516003811115611d2757fe5b14611d4357611cd0600560168b60200151600381111561196357fe5b611d51896040015183613d51565b8a602001819350826003811115611d6457fe5b6003811115611d6f57fe5b9052506000905089602001516003811115611d8657fe5b14611da257611cd0600560168b60200151600381111561196357fe5b600954604080516340c10f1960e01b81526001600160a01b039283166004820152602481018590529051918916916340c10f199160448082019260009290919082900301818387803b158015611df757600080fd5b505af1158015611e0b573d6000803e3d6000fd5b5050604080516001600160a01b038c1681526020810186905281517fb0715a6d41a37c1b0672c22c09a31a0642c1fb3f9efa2d5fd5c6d2d891ee78c69450908190039091019150a1611e5f565b5060408801515b866001600160a01b03166340c10f1989836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015611ebf57600080fd5b505af1158015611ed3573d6000803e3d6000fd5b5050600f546001600160a01b038b1660008181526011602090815260409182902093909355805191825291810185905281517e2e68ab1600fc5e7290e2ceaa79e2f86b4dbaca84a48421e167e0b40409218a9450908190039091019150a16000611cd0565b600b805460ff19166001179055919050565b600d5481565b6004546001600160a01b031681565b60065460ff1681565b6000546001600160a01b03163314611fb8576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b601654604080516001600160a01b039283168152918316602083015280517fe45150fb0a88e2274ecbca05ddde9925dd64b6e126ae0fa23ee2d42e668a49d39281900390910190a1601680546001600160a01b0319166001600160a01b0392909216919091179055565b670de0b6b3a764000081565b600061206e6040518060400160405280601b81526020017f746f67676c654f6e6c795072696d65486f6c6465724d696e7428290000000000815250613a06565b601554600160a01b900460ff1615801561209157506015546001600160a01b0316155b1561209e5750600261210a565b60155460408051600160a01b90920460ff161580158352602083015280517f8efa7b6021d602e0cdef814b7435609ee40deb2a0352ca676d10045750516a5f9281900390910190a16015805460ff60a01b198116600160a01b9182900460ff1615909102179055600090505b90565b600080600080600061211e876129b3565b60048054604080516315e3f14f60e11b81526001600160a01b038c81169482019490945290519394506000936121a89386931691632bc7e29e916024808301926020929190829003018186803b15801561217757600080fd5b505afa15801561218b573d6000803e3d6000fd5b505050506040513d60208110156121a157600080fd5b5051613d51565b909350905060008360038111156121bb57fe5b146121f75760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6001600160a01b03881660009081526012602052604090205461221a9082613ccf565b9093509050600083600381111561222d57fe5b146122695760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6001600160a01b0388166000908152601260205260408120548290848a106122e9576122958585613d51565b909650925060008660038111156122a857fe5b146122e45760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b612676565b60006122fd8b670de0b6b3a7640000613c65565b9097509050600087600381111561231057fe5b14612362576040805162461bcd60e51b815260206004820152601b60248201527f5641495f504152545f43414c43554c4154494f4e5f4641494c45440000000000604482015290519081900360640190fd5b61236c8187613ca4565b9097509050600087600381111561237f57fe5b146123d1576040805162461bcd60e51b815260206004820152601b60248201527f5641495f504152545f43414c43554c4154494f4e5f4641494c45440000000000604482015290519081900360640190fd5b60006123dd8787613d51565b909850905060008860038111156123f057fe5b1461242c5760405162461bcd60e51b81526004018080602001828103825260248152602001806144756024913960400191505060405180910390fd5b6124368183613c65565b9098509450600088600381111561244957fe5b146124855760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b61249785670de0b6b3a7640000613ca4565b909850945060008860038111156124aa57fe5b146124e65760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6124f08683613c65565b9098509350600088600381111561250357fe5b1461253f5760405162461bcd60e51b815260040180806020018281038252602e8152602001806143e7602e913960400191505060405180910390fd5b61255184670de0b6b3a7640000613ca4565b9098509350600088600381111561256457fe5b146125a05760405162461bcd60e51b815260040180806020018281038252602e8152602001806143e7602e913960400191505060405180910390fd5b6001600160a01b038d166000908152601260205260409020546125c39083613c65565b909850925060008860038111156125d657fe5b146126125760405162461bcd60e51b815260040180806020018281038252602481526020018061437f6024913960400191505060405180910390fd5b61262483670de0b6b3a7640000613ca4565b9098509250600088600381111561263757fe5b146126735760405162461bcd60e51b815260040180806020018281038252602481526020018061437f6024913960400191505060405180910390fd5b50505b919750955093505050509250925092565b600b54600090819060ff166126d0576040805162461bcd60e51b815260206004820152600a6024820152691c994b595b9d195c995960b21b604482015290519081900360640190fd5b600b805460ff191690556004546001600160a01b03161561280d576126f3612d33565b60008311612748576040805162461bcd60e51b815260206004820152601c60248201527f7265706179564149416d6f756e742063616e6e74206265207a65726f00000000604482015290519081900360640190fd5b600480546040805163084bf5ab60e31b815290516001600160a01b039092169263425fad58928282019260209290829003018186803b15801561278a57600080fd5b505afa15801561279e573d6000803e3d6000fd5b505050506040513d60208110156127b457600080fd5b5051156127fd576040805162461bcd60e51b81526020600482015260126024820152711c1c9bdd1bd8dbdb081a5cc81c185d5cd95960721b604482015290519081900360640190fd5b612808333385613de2565b915091505b600b805460ff191660011790559092909150565b6000546001600160a01b03163314612871576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b6001600160a01b0381166128cc576040805162461bcd60e51b815260206004820152601860248201527f696e76616c696420726563656976657220616464726573730000000000000000604482015290519081900360640190fd5b600e80546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517f4df62dd7d9cc4f480a167c19c616ae5d5bb40db6d0c2bc66dba57068225f00d8929181900390910190a15050565b62a0668090565b600080612941612e3c565b90506000806129578361295261292f565b613ca4565b9092509050600082600381111561296a57fe5b146129a65760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b9250505090565b60135481565b600080600080600460009054906101000a90046001600160a01b03166001600160a01b0316632bc7e29e866040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015612a2457600080fd5b505afa158015612a38573d6000803e3d6000fd5b505050506040513d6020811015612a4e57600080fd5b50516001600160a01b03861660009081526012602052604081205491925080612a778484613d51565b90965091506000866003811115612a8a57fe5b14612ac65760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b612ada600f54612ad58a610b40565b613d51565b90965094506000866003811115612aed57fe5b14612b295760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b612b338583613c65565b90965090506000866003811115612b4657fe5b14612b825760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b612b9481670de0b6b3a7640000613ca4565b90965090506000866003811115612ba757fe5b14612be35760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b612bed8482613ccf565b90965093506000866003811115612c0057fe5b14612c3c5760405162461bcd60e51b81526004018080602001828103825260298152602001806144156029913960400191505060405180910390fd5b50919695505050505050565b6000546001600160a01b03163314612c98576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b600f5415612ce3576040805162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b670de0b6b3a7640000600f55612cf761424d565b601055600019601355600b805460ff19166001179055565b6003546001600160a01b031681565b600f5481565b6008546001600160a01b031681565b600080612d52612d41612936565b601054612d4c61424d565b03613c65565b90925090506000826003811115612d6557fe5b14612db7576040805162461bcd60e51b815260206004820152601a60248201527f5641495f494e5445524553545f4143435552455f4641494c4544000000000000604482015290519081900360640190fd5b612dc381600f54613ccf565b90925090506000826003811115612dd657fe5b14612e28576040805162461bcd60e51b815260206004820152601a60248201527f5641495f494e5445524553545f4143435552455f4641494c4544000000000000604482015290519081900360640190fd5b600f819055612e3561424d565b6010555050565b60048054604080516307dc0d1d60e41b8152905160009384936001600160a01b031692637dc0d1d09281830192602092829003018186803b158015612e8057600080fd5b505afa158015612e94573d6000803e3d6000fd5b505050506040513d6020811015612eaa57600080fd5b5051600c54909150600090156130ff57600d54156130f3576000826001600160a01b031663fc57d4df612edb6131e2565b6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b158015612f2157600080fd5b505afa158015612f35573d6000803e3d6000fd5b505050506040513d6020811015612f4b57600080fd5b50519050670de0b6b3a76400008110156130e657600080612f74670de0b6b3a764000084613d51565b90945091506000846003811115612f8757fe5b14612fc35760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b612fcf82600d54613c65565b90945091506000846003811115612fe257fe5b1461301e5760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b61303082670de0b6b3a7640000613ca4565b9094509150600084600381111561304357fe5b1461307f5760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b61308b82600c54613ccf565b9094509050600084600381111561309e57fe5b146130da5760405162461bcd60e51b81526004018080602001828103825260218152602001806144996021913960400191505060405180910390fd5b945061210a9350505050565b600c54935050505061210a565b600c549250505061210a565b60009250505061210a565b6000546001600160a01b0316331461315a576040805162461bcd60e51b815260206004820152600e60248201526d37b7363c9030b236b4b71031b0b760911b604482015290519081900360640190fd5b601554604080516001600160a01b039283168152918316602083015280517ffb26401242c61b503dd09c29da64a5d4f451549f574b882a40bcdc64ee68b83c9281900390910190a1601580546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031681565b6015546001600160a01b031681565b6016546001600160a01b031690565b600080546001600160a01b031633148061321557506008546001600160a01b031633145b61322c57613225600160176133f2565b905061338d565b670de0b6b3a76400008210613288576040805162461bcd60e51b815260206004820152601d60248201527f74726561737572792070657263656e7420636170206f766572666c6f77000000604482015290519081900360640190fd5b6008805460098054600a80546001600160a01b038a81166001600160a01b031980881682179098558a821697851697909717909455908790556040805194841680865260208601969096528051929093169390927f29f06ea15931797ebaed313d81d100963dc22cb213cb4ce2737b5a62b1a8b1e892918290030190a1604080516001600160a01b0380851682528816602082015281517f8de763046d7b8f08b6c3d03543de1d615309417842bb5d2d62f110f65809ddac929181900390910190a1604080518281526020810187905281517f0893f8f4101baaabbeb513f96761e7a36eb837403c82cc651c292a4abdc94ed7929181900390910190a1600093505050505b9392505050565b6005546001600160e01b03811690600160e01b900463ffffffff1682565b601554600160a01b900460ff1681565b60126020526000908152604090205481565b600e546001600160a01b031681565b6000546001600160a01b031681565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083600681111561342157fe5b83601781111561342d57fe5b604080519283526020830191909152600082820152519081900360600190a182600681111561338d57fe5b60045460009081906001600160a01b0316156139aa57613476612d33565b6004805460408051632fe3f38f60e11b815230938101939093526001600160a01b038681166024850152898116604485015288811660648501526084840188905290516000939190921691635fc7e71e9160a48082019260209290919082900301818787803b1580156134e857600080fd5b505af11580156134fc573d6000803e3d6000fd5b505050506040513d602081101561351257600080fd5b505190508015613536576135296002600a83613d74565b9250600091506139aa9050565b61353e61424d565b846001600160a01b0316636c540baf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561357757600080fd5b505afa15801561358b573d6000803e3d6000fd5b505050506040513d60208110156135a157600080fd5b5051146135b457613529600260096133f2565b866001600160a01b0316866001600160a01b031614156135da576135296002600f6133f2565b846135eb576135296002600d6133f2565b600019851415613601576135296002600c6133f2565b60008061360f898989613de2565b9092509050811561363f5761363082600681111561362957fe5b60106133f2565b9450600093506139aa92505050565b600480546040805163a78dc77560e01b81526001600160a01b038a8116948201949094526024810185905281516000948594169263a78dc7759260448082019391829003018186803b15801561369457600080fd5b505afa1580156136a8573d6000803e3d6000fd5b505050506040513d60408110156136be57600080fd5b508051602090910151909250905081156137095760405162461bcd60e51b815260040180806020018281038252603781526020018061443e6037913960400191505060405180910390fd5b80886001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561376057600080fd5b505afa158015613774573d6000803e3d6000fd5b505050506040513d602081101561378a57600080fd5b505110156137df576040805162461bcd60e51b815260206004820152601c60248201527f5641495f4c49515549444154455f5345495a455f544f4f5f4d55434800000000604482015290519081900360640190fd5b6040805163b2a02ff160e01b81526001600160a01b038d811660048301528c811660248301526044820184905291516000928b169163b2a02ff191606480830192602092919082900301818787803b15801561383a57600080fd5b505af115801561384e573d6000803e3d6000fd5b505050506040513d602081101561386457600080fd5b5051905080156138b2576040805162461bcd60e51b81526020600482015260146024820152731d1bdad95b881cd95a5e9d5c994819985a5b195960621b604482015290519081900360640190fd5b604080516001600160a01b03808f168252808e1660208301528183018790528b1660608201526080810184905290517f42d401f96718a0c42e5cea8108973f0022677b7e2e5f4ee19851b2de7a0394e79181900360a00190a160048054604080516347ef3b3b60e01b815230938101939093526001600160a01b038c811660248501528f811660448501528e811660648501526084840188905260a4840186905290519116916347ef3b3b9160c480830192600092919082900301818387803b15801561397e57600080fd5b505af1158015613992573d6000803e3d6000fd5b506000925061399f915050565b975092955050505050505b94509492505050565b6001600160a01b038116610b3d576040805162461bcd60e51b815260206004820152601560248201527463616e2774206265207a65726f206164647265737360581b604482015290519081900360640190fd5b601454604080516318c5e8ab60e01b81523360048201818152602483019384528551604484015285516001600160a01b03909516946318c5e8ab949293879391606490910190602085019080838360005b83811015613a6f578181015183820152602001613a57565b50505050905090810190601f168015613a9c5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015613aba57600080fd5b505afa158015613ace573d6000803e3d6000fd5b505050506040513d6020811015613ae457600080fd5b5051610b3d576040805162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b604482015290519081900360640190fd5b6000613b3161436b565b600080613b4686600001518660000151613c65565b90925090506000826003811115613b5957fe5b14613b7857506040805160208101909152600081529092509050613c0b565b600080613b8d6706f05b59d3b2000084613ccf565b90925090506000826003811115613ba057fe5b14613bc257506040805160208101909152600081529094509250613c0b915050565b600080613bd783670de0b6b3a7640000613ca4565b90925090506000826003811115613bea57fe5b14613bf157fe5b604080516020810190915290815260009750955050505050505b9250929050565b6000806000613c1f61436b565b613c298686614251565b90925090506000826003811115613c3c57fe5b14613c4d5750915060009050613c0b565b6000613c58826142b9565b9350935050509250929050565b60008083613c7857506000905080613c0b565b83830283858281613c8557fe5b0414613c9957506002915060009050613c0b565b600092509050613c0b565b60008082613cb85750600190506000613c0b565b6000838581613cc357fe5b04915091509250929050565b600080838301848110613ce757600092509050613c0b565b506002915060009050613c0b565b6000806000613d0261436b565b613d0c8787614251565b90925090506000826003811115613d1f57fe5b14613d305750915060009050613d49565b613d42613d3c826142b9565b86613ccf565b9350935050505b935093915050565b600080838311613d68575060009050818303613c0b565b50600390506000613c0b565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0846006811115613da357fe5b846017811115613daf57fe5b604080519283526020830191909152818101859052519081900360600190a1836006811115613dda57fe5b949350505050565b600080600080600080613df5888861210d565b60165460408051632770a7eb60e21b81526001600160a01b038f8116600483015260248201879052915195985093965091945016918291639dc29fac91604480830192600092919082900301818387803b158015613e5257600080fd5b505af1158015613e66573d6000803e3d6000fd5b5050600e54604080516323b872dd60e01b81526001600160a01b038f8116600483015292831660248201526044810188905290516000945091851692506323b872dd91606480830192602092919082900301818787803b158015613ec957600080fd5b505af1158015613edd573d6000803e3d6000fd5b505050506040513d6020811015613ef357600080fd5b50519050600181151514613f4e576040805162461bcd60e51b815260206004820152601a60248201527f6661696c656420746f207472616e736665722056414920666565000000000000604482015290519081900360640190fd5b60048054604080516315e3f14f60e11b81526001600160a01b038e811694820194909452905160009390921691632bc7e29e91602480820192602092909190829003018186803b158015613fa157600080fd5b505afa158015613fb5573d6000803e3d6000fd5b505050506040513d6020811015613fcb57600080fd5b505190506000613fdb8288613d51565b90985090506000886003811115613fee57fe5b1461402a5760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6140348186613d51565b9098509050600088600381111561404757fe5b146140835760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6001600160a01b038c166000908152601260205260409020546140a69086613d51565b6001600160a01b038e166000908152601260205260408120919091559098508860038111156140d157fe5b1461410d5760405162461bcd60e51b81526004018080602001828103825260228152602001806143c56022913960400191505060405180910390fd5b6000600460009054906101000a90046001600160a01b03166001600160a01b031663fd51a3ad8e846040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561418457600080fd5b505af1158015614198573d6000803e3d6000fd5b505050506040513d60208110156141ae57600080fd5b5051905080156141cc57995060009850613d49975050505050505050565b7f1db858e6f7e1a0d5e92c10c6507d42b3dabfe0a4867fe90c5a14d9963662ef7e8e8e8a60405180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001828152602001935050505060405180910390a160009e979d50969b505050505050505050505050565b4390565b600061425b61436b565b60008061426c866000015186613c65565b9092509050600082600381111561427f57fe5b1461429e57506040805160208101909152600081529092509050613c0b565b60408051602081019091529081526000969095509350505050565b51670de0b6b3a7640000900490565b6040805161018081019091526000808252602082019081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161431c61436b565b815260200161432961436b565b815260200161433661436b565b905290565b6040805160a081019091526000808252602082019081526020016000815260200160008152602001600081525090565b604051806020016040528060008152509056fe5641495f504153545f494e5445524553545f43414c43554c4154494f4e5f4641494c45445641495f4d494e545f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f4255524e5f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f43555252454e545f494e5445524553545f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f544f54414c5f52455041595f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f414d4f554e545f5345495a455f4641494c45445641495f4d494e5445445f414d4f554e545f43414c43554c4154494f4e5f4641494c45445641495f52455041595f524154455f43414c43554c4154494f4e5f4641494c45446f6e6c7920756e6974726f6c6c65722061646d696e2063616e206368616e676520627261696e73a265627a7a72315820009e524be3c8d5acac97b880ce3cecc5477c99e672e23f9350ebfab2d2b6eabd64736f6c63430005100032",
  "devdoc": {
    "author": "Venus",
    "methods": {
      "_setComptroller(address)": {
        "details": "Admin function to set a new comptroller",
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      },
      "getVAIAddress()": {
        "return": "The address of VAI"
      },
      "getVAICalculateRepayAmount(address,uint256)": {
        "params": {
          "borrower": "The address of the VAI borrower",
          "repayAmount": "The amount of VAI being returned"
        },
        "return": "(uint, uint, uint) Amount of VAI to be burned, amount of VAI the user needs to pay in current interest and amount of VAI the user needs to pay in past interest"
      },
      "getVAIRepayAmount(address)": {
        "params": {
          "account": "The address of the VAI borrower"
        },
        "return": "(uint) The total amount of VAI the user needs to repay"
      },
      "liquidateVAI(address,uint256,address)": {
        "params": {
          "borrower": "The borrower of vai to be liquidated",
          "repayAmount": "The amount of the underlying borrowed asset to repay",
          "vTokenCollateral": "The market in which to seize collateral from the borrower"
        },
        "return": "(uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount."
      },
      "mintVAI(uint256)": {
        "params": {
          "mintVAIAmount": "The amount of the VAI to be minted."
        },
        "return": "0 on success, otherwise an error code"
      },
      "repayVAI(uint256)": {
        "params": {
          "repayVAIAmount": "The amount of the VAI to be repaid."
        },
        "return": "0 on success, otherwise an error code"
      },
      "setAccessControl(address)": {
        "details": "Admin function to set the access control address",
        "params": {
          "newAccessControlAddress": "New address for the access control"
        }
      },
      "setBaseRate(uint256)": {
        "params": {
          "newBaseRateMantissa": "the base rate multiplied by 10**18"
        }
      },
      "setFloatRate(uint256)": {
        "params": {
          "newFloatRateMantissa": "the VAI float rate multiplied by 10**18"
        }
      },
      "setMintCap(uint256)": {
        "params": {
          "_mintCap": "the amount of VAI that can be minted"
        }
      },
      "setPrimeToken(address)": {
        "params": {
          "prime_": "The new address of the prime token contract"
        }
      },
      "setReceiver(address)": {
        "params": {
          "newReceiver": "the address of the VAI fee receiver"
        }
      },
      "setVAIToken(address)": {
        "params": {
          "vai_": "The new address of the VAI token contract"
        }
      },
      "toggleOnlyPrimeHolderMint()": {
        "return": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
      }
    },
    "title": "VAI Comptroller"
  },
  "userdoc": {
    "methods": {
      "_setComptroller(address)": {
        "notice": "Sets a new comptroller"
      },
      "getVAIAddress()": {
        "notice": "Return the address of the VAI token"
      },
      "getVAICalculateRepayAmount(address,uint256)": {
        "notice": "Calculate how much VAI the user needs to repay"
      },
      "getVAIRepayAmount(address)": {
        "notice": "Get the current total VAI a user needs to repay"
      },
      "liquidateVAI(address,uint256,address)": {
        "notice": "The sender liquidates the vai minters collateral. The collateral seized is transferred to the liquidator."
      },
      "mintVAI(uint256)": {
        "notice": "The mintVAI function mints and transfers VAI from the protocol to the user, and adds a borrow balance. The amount minted must be less than the user's Account Liquidity and the mint vai limit."
      },
      "repayVAI(uint256)": {
        "notice": "The repay function transfers VAI into the protocol and burn, reducing the user's borrow balance. Before repaying an asset, users must first approve the VAI to access their VAI balance."
      },
      "setAccessControl(address)": {
        "notice": "Sets the address of the access control of this contract"
      },
      "setBaseRate(uint256)": {
        "notice": "Set VAI borrow base rate"
      },
      "setFloatRate(uint256)": {
        "notice": "Set VAI borrow float rate"
      },
      "setMintCap(uint256)": {
        "notice": "Set VAI mint cap"
      },
      "setPrimeToken(address)": {
        "notice": "Set the prime token contract address"
      },
      "setReceiver(address)": {
        "notice": "Set VAI stability fee receiver address"
      },
      "setVAIToken(address)": {
        "notice": "Set the VAI token contract address"
      },
      "toggleOnlyPrimeHolderMint()": {
        "notice": "Toggle mint only for prime holder"
      }
    },
    "notice": "This is the implementation contract for the VAIUnitroller proxy"
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15314,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15316,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15318,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "vaiControllerImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15320,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "pendingVAIControllerImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15325,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "comptroller",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ComptrollerInterface)2310"
      },
      {
        "astId": 15332,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "venusVAIState",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(VenusVAIState)15330_storage"
      },
      {
        "astId": 15334,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "isVenusVAIInitialized",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 15338,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "venusVAIMinterIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15343,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "treasuryGuardian",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 15345,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 15347,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 15349,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "_notEntered",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 15351,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "baseRateMantissa",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 15353,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "floatRateMantissa",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 15355,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "receiver",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 15357,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "vaiMintIndex",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 15359,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "accrualBlockNumber",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 15363,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "vaiMinterInterestIndex",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15367,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "pastVAIInterest",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15369,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "mintCap",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 15371,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "accessControl",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 15376,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "prime",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 15378,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "mintEnabledOnlyForPrimeHolder",
        "offset": 20,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 15383,
        "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
        "label": "vai",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ComptrollerInterface)2310": {
        "encoding": "inplace",
        "label": "contract ComptrollerInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(VenusVAIState)15330_storage": {
        "encoding": "inplace",
        "label": "struct VAIControllerStorageG1.VenusVAIState",
        "members": [
          {
            "astId": 15327,
            "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 15329,
            "contract": "contracts/Tokens/VAI/VAIController.sol:VAIController",
            "label": "block",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
